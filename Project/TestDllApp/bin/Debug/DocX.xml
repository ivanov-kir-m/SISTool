<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DocX</name>
    </assembly>
    <members>
        <member name="T:Novacode.Border">
            <summary>
            Represents a border of a table or table cell
            Added by lckuiper @ 20101117
            </summary>
        </member>
        <member name="T:Novacode.Axis">
            <summary>
            Axis base class
            </summary>
        </member>
        <member name="P:Novacode.Axis.Id">
            <summary>
            ID of this Axis 
            </summary>
        </member>
        <member name="P:Novacode.Axis.IsVisible">
            <summary>
            Return true if this axis is visible
            </summary>
        </member>
        <member name="P:Novacode.Axis.Xml">
            <summary>
            Axis xml element
            </summary>
        </member>
        <member name="T:Novacode.CategoryAxis">
            <summary>
            Represents Category Axes
            </summary>
        </member>
        <member name="T:Novacode.ValueAxis">
            <summary>
            Represents Values Axes
            </summary>
        </member>
        <member name="T:Novacode.BarChart">
            <summary>
            This element contains the 2-D bar or column series on this chart.
            21.2.2.16 barChart (Bar Charts)
            </summary>
        </member>
        <member name="P:Novacode.BarChart.BarDirection">
            <summary>
            Specifies the possible directions for a bar chart.
            </summary>
        </member>
        <member name="P:Novacode.BarChart.BarGrouping">
            <summary>
            Specifies the possible groupings for a bar chart.
            </summary>
        </member>
        <member name="P:Novacode.BarChart.GapWidth">
            <summary>
            Specifies that its contents contain a percentage between 0% and 500%.
            </summary>
        </member>
        <member name="T:Novacode.BarDirection">
            <summary>
            Specifies the possible directions for a bar chart.
            21.2.3.3 ST_BarDir (Bar Direction)
            </summary>
        </member>
        <member name="T:Novacode.BarGrouping">
            <summary>
            Specifies the possible groupings for a bar chart.
            21.2.3.4 ST_BarGrouping (Bar Grouping)
            </summary>
        </member>
        <member name="T:Novacode.Chart">
            <summary>
            Represents every Chart in this document.
            </summary>
        </member>
        <member name="P:Novacode.Chart.Xml">
            <summary>
            The xml representation of this chart
            </summary>
        </member>
        <member name="P:Novacode.Chart.Series">
            <summary>
            Chart's series
            </summary>
        </member>
        <member name="P:Novacode.Chart.MaxSeriesCount">
            <summary>
            Return maximum count of series
            </summary>
        </member>
        <member name="M:Novacode.Chart.AddSeries(Novacode.Series)">
            <summary>
            Add a new series to this chart
            </summary>
        </member>
        <member name="P:Novacode.Chart.Legend">
            <summary>
            Chart's legend.
            If legend doesn't exist property is null.
            </summary>
        </member>
        <member name="M:Novacode.Chart.AddLegend">
            <summary>
            Add standart legend to the chart.
            </summary>
        </member>
        <member name="M:Novacode.Chart.AddLegend(Novacode.ChartLegendPosition,System.Boolean)">
            <summary>
            Add a legend with parameters to the chart.
            </summary>
        </member>
        <member name="M:Novacode.Chart.RemoveLegend">
            <summary>
            Remove the legend from the chart.
            </summary>
        </member>
        <member name="P:Novacode.Chart.CategoryAxis">
            <summary>
            Represents the category axis
            </summary>
        </member>
        <member name="P:Novacode.Chart.ValueAxis">
            <summary>
            Represents the values axis
            </summary>
        </member>
        <member name="P:Novacode.Chart.IsAxisExist">
            <summary>
            Represents existing the axis
            </summary>
        </member>
        <member name="P:Novacode.Chart.View3D">
            <summary>
            Get or set 3D view for this chart
            </summary>
        </member>
        <member name="P:Novacode.Chart.DisplayBlanksAs">
            <summary>
            Specifies how blank cells shall be plotted on a chart
            </summary>
        </member>
        <member name="M:Novacode.Chart.#ctor">
            <summary>
            Create an Chart for this document
            </summary>        
        </member>
        <member name="M:Novacode.Chart.CreateChartXml">
            <summary>
            An abstract method which creates the current chart xml
            </summary>
        </member>
        <member name="T:Novacode.Series">
            <summary>
            Represents a chart series
            </summary>
        </member>
        <member name="P:Novacode.Series.Xml">
            <summary>
            Series xml element
            </summary>
        </member>
        <member name="T:Novacode.ChartLegend">
            <summary>
            Represents a chart legend
            More: http://msdn.microsoft.com/ru-ru/library/cc845123.aspx
            </summary>
        </member>
        <member name="P:Novacode.ChartLegend.Xml">
            <summary>
            Legend xml element
            </summary>
        </member>
        <member name="P:Novacode.ChartLegend.Overlay">
            <summary>
            Specifies that other chart elements shall be allowed to overlap this chart element
            </summary>
        </member>
        <member name="P:Novacode.ChartLegend.Position">
            <summary>
            Specifies the possible positions for a legend
            </summary>
        </member>
        <member name="M:Novacode.ChartLegend.GetOverlayValue(System.Boolean)">
            <summary>
            ECMA-376, page 3840
            21.2.2.132 overlay (Overlay)
            </summary>
        </member>
        <member name="T:Novacode.ChartLegendPosition">
            <summary>
            Specifies the possible positions for a legend.
            21.2.3.24 ST_LegendPos (Legend Position)
            </summary>
        </member>
        <member name="T:Novacode.DisplayBlanksAs">
            <summary>
            Specifies the possible ways to display blanks.
            21.2.3.10 ST_DispBlanksAs (Display Blanks As)
            </summary>
        </member>
        <member name="T:Novacode.LineChart">
            <summary>
            This element contains the 2-D line chart series.
            21.2.2.97 lineChart (Line Charts)
            </summary>
        </member>
        <member name="P:Novacode.LineChart.Grouping">
            <summary>
            Specifies the kind of grouping for a column, line, or area chart.
            </summary>
        </member>
        <member name="T:Novacode.Grouping">
            <summary>
            Specifies the kind of grouping for a column, line, or area chart.
            21.2.2.76 grouping (Grouping)
            </summary>
        </member>
        <member name="T:Novacode.PieChart">
            <summary>
            This element contains the 2-D pie series for this chart.
            21.2.2.141 pieChart (Pie Charts)
            </summary>
        </member>
        <member name="M:Novacode.XElementHelpers.GetValueToEnum``1(System.Xml.Linq.XElement)">
            <summary>
            Get value from XElement and convert it to enum
            </summary>
            <typeparam name="T">Enum type</typeparam>        
        </member>
        <member name="M:Novacode.XElementHelpers.SetValueFromEnum``1(System.Xml.Linq.XElement,``0)">
            <summary>
            Convert value to xml string and set it into XElement
            </summary>
            <typeparam name="T">Enum type</typeparam> 
        </member>
        <member name="M:Novacode.XElementHelpers.GetXmlNameFromEnum``1(``0)">
            <summary>
            Return xml string for this value
            </summary>
            <typeparam name="T">Enum type</typeparam> 
        </member>
        <member name="T:Novacode.XmlNameAttribute">
            <summary>
            This attribute applied to enum's fields for definition their's real xml names in DocX file.
            </summary>
            <example>
            public enum MyEnum
            {
               [XmlName("one")] // This means, that xml element has 'val="one"'
               ValueOne,
               [XmlName("two")] // This means, that xml element has 'val="two"'
               ValueTwo
            }
            </example>
        </member>
        <member name="P:Novacode.XmlNameAttribute.XmlName">
            <summary>
            Real xml name
            </summary>
        </member>
        <member name="P:Novacode.Container.Paragraphs">
             <summary>
             Returns a list of all Paragraphs inside this container.
             </summary>
             <example>
             <code>
              Load a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                // All Paragraphs in this document.
                <![CDATA[ List<Paragraph> ]]> documentParagraphs = document.Paragraphs;
                
                // Make sure this document contains at least one Table.
                if (document.Tables.Count() > 0)
                {
                    // Get the first Table in this document.
                    Table t = document.Tables[0];
            
                    // All Paragraphs in this Table.
                    <![CDATA[ List<Paragraph> ]]> tableParagraphs = t.Paragraphs;
                
                    // Make sure this Table contains at least one Row.
                    if (t.Rows.Count() > 0)
                    {
                        // Get the first Row in this document.
                        Row r = t.Rows[0];
            
                        // All Paragraphs in this Row.
                        <![CDATA[ List<Paragraph> ]]> rowParagraphs = r.Paragraphs;
            
                        // Make sure this Row contains at least one Cell.
                        if (r.Cells.Count() > 0)
                        {
                            // Get the first Cell in this document.
                            Cell c = r.Cells[0];
            
                            // All Paragraphs in this Cell.
                            <![CDATA[ List<Paragraph> ]]> cellParagraphs = c.Paragraphs;
                        }
                    }
                }
            
                // Save all changes to this document.
                document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Container.RemoveParagraphAt(System.Int32)">
            <summary>
            Removes paragraph at specified position
            </summary>
            <param name="index">Index of paragraph to remove</param>
            <returns>True if removed</returns>
        </member>
        <member name="M:Novacode.Container.RemoveParagraph(Novacode.Paragraph)">
            <summary>
            Removes paragraph
            </summary>
            <param name="p">Paragraph to remove</param>
            <returns>True if removed</returns>
        </member>
        <member name="M:Novacode.Container.SetDirection(Novacode.Direction)">
             <summary>
             Sets the Direction of content.
             </summary>
             <param name="direction">Direction either LeftToRight or RightToLeft</param>
             <example>
             Set the Direction of content in a Paragraph to RightToLeft.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                // Get the first Paragraph from this document.
                Paragraph p = document.InsertParagraph();
            
                // Set the Direction of this Paragraph.
                p.Direction = Direction.RightToLeft;
            
                // Make sure the document contains at lest one Table.
                if (document.Tables.Count() > 0)
                {
                    // Get the first Table from this document.
                    Table t = document.Tables[0];
            
                    /* 
                     * Set the direction of the entire Table.
                     * Note: The same function is available at the Row and Cell level.
                     */
                    t.SetDirection(Direction.RightToLeft);
                }
            
                // Save all changes to this document.
                document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Container.FindUniqueByPattern(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Find all unique instances of the given Regex Pattern,
            returning the list of the unique strings found
            </summary>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Novacode.Container.ReplaceText(System.String,System.Func{System.String,System.String},System.Boolean,System.Text.RegularExpressions.RegexOptions,Novacode.Formatting,Novacode.Formatting,Novacode.MatchFormattingOptions)">
            <summary>
            
            </summary>
            <param name="searchValue">Value to find</param>
            <param name="regexMatchHandler">A Func that accepts the matching regex search group value and passes it to this to return the replacement string</param>
            <param name="trackChanges">Enable trackchanges</param>
            <param name="options">Regex options</param>
            <param name="newFormatting"></param>
            <param name="matchFormatting"></param>
            <param name="formattingOptions"></param>
        </member>
        <member name="M:Novacode.Container.RemoveTextInGivenFormat(Novacode.Formatting,Novacode.MatchFormattingOptions)">
            <summary>
            Removes all items with required formatting
            </summary>
            <returns>Numer of texts removed</returns>
        </member>
        <member name="M:Novacode.ExtensionsHeadings.HasFlag(System.Enum,System.Enum)">
            <summary>
            From: http://stackoverflow.com/questions/4108828/generic-extension-method-to-see-if-an-enum-contains-a-flag
            Check to see if a flags enumeration has a specific flag set.
            </summary>
            <param name="variable">Flags enumeration to check</param>
            <param name="value">Flag to check for</param>
            <returns></returns>
        </member>
        <member name="T:Novacode.Font">
            <summary>
            Represents a font family
            </summary>
        </member>
        <member name="M:Novacode.Font.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Novacode.Font" />
            </summary>
            <param name="name">The name of the font family</param>
        </member>
        <member name="P:Novacode.Font.Name">
            <summary>
            The name of the font family
            </summary>
        </member>
        <member name="M:Novacode.Font.ToString">
            <summary>
            Returns a string representation of an object
            </summary>
            <returns>The name of the font family</returns>
        </member>
        <member name="P:Novacode.CustomProperty.Name">
            <summary>
            The name of this CustomProperty.
            </summary>
        </member>
        <member name="P:Novacode.CustomProperty.Value">
            <summary>
            The value of this CustomProperty.
            </summary>
        </member>
        <member name="M:Novacode.CustomProperty.#ctor(System.String,System.String)">
            <summary>
            Create a new CustomProperty to hold a string.
            </summary>
            <param name="name">The name of this CustomProperty.</param>
            <param name="value">The value of this CustomProperty.</param>
        </member>
        <member name="M:Novacode.CustomProperty.#ctor(System.String,System.Int32)">
            <summary>
            Create a new CustomProperty to hold an int.
            </summary>
            <param name="name">The name of this CustomProperty.</param>
            <param name="value">The value of this CustomProperty.</param>
        </member>
        <member name="M:Novacode.CustomProperty.#ctor(System.String,System.Double)">
            <summary>
            Create a new CustomProperty to hold a double.
            </summary>
            <param name="name">The name of this CustomProperty.</param>
            <param name="value">The value of this CustomProperty.</param>
        </member>
        <member name="M:Novacode.CustomProperty.#ctor(System.String,System.DateTime)">
            <summary>
            Create a new CustomProperty to hold a DateTime.
            </summary>
            <param name="name">The name of this CustomProperty.</param>
            <param name="value">The value of this CustomProperty.</param>
        </member>
        <member name="M:Novacode.CustomProperty.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new CustomProperty to hold a bool.
            </summary>
            <param name="name">The name of this CustomProperty.</param>
            <param name="value">The value of this CustomProperty.</param>
        </member>
        <member name="T:Novacode.DocProperty">
            <summary>
            Represents a field of type document property. This field displays the value stored in a custom property.
            </summary>
        </member>
        <member name="P:Novacode.DocProperty.Name">
            <summary>
            The custom property to display.
            </summary>
        </member>
        <member name="M:Novacode.HelperFunctions.ContainsEveryChildOf(System.Xml.Linq.XElement,System.Xml.Linq.XElement,Novacode.MatchFormattingOptions)">
            <summary>
            Checks whether 'toCheck' has all children that 'desired' has and values of 'val' attributes are the same
            </summary>
            <param name="desired"></param>
            <param name="toCheck"></param>
            <param name="fo">Matching options whether check if desired attributes are inder a, or a has exactly and only these attributes as b has.</param>
            <returns></returns>
        </member>
        <member name="M:Novacode.HelperFunctions.AddDefaultNumberingXml(System.IO.Packaging.Package)">
            <summary>
            If this document does not contain a /word/numbering.xml add the default one generated by Microsoft Word 
            when the default bullet, numbered and multilevel lists are added to a blank document
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Novacode.HelperFunctions.AddDefaultStylesXml(System.IO.Packaging.Package)">
            <summary>
            If this document does not contain a /word/styles.xml add the default one generated by Microsoft Word.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Novacode.HelperFunctions.CreateTableCell(System.Double)">
            <summary>
            Create and return a cell of a table        
            </summary>        
        </member>
        <member name="M:Novacode.HelperFunctions.IsSameFile(System.IO.Stream,System.IO.Stream)">
            <!-- 
            Bug found and fixed by trnilse. To see the change, 
            please compare this release to the previous release using TFS compare.
            -->
        </member>
        <member name="T:Novacode.Hyperlink">
            <summary>
            Represents a Hyperlink in a document.
            </summary>
        </member>
        <member name="M:Novacode.Hyperlink.Remove">
             <summary>
             Remove a Hyperlink from this Paragraph only.
             </summary>
             <example>
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                // Add a hyperlink to this document.
                Hyperlink h = document.AddHyperlink("link", new Uri("http://www.google.com"));
            
                // Add a Paragraph to this document and insert the hyperlink
                Paragraph p1 = document.InsertParagraph();
                p1.Append("This is a cool ").AppendHyperlink(h).Append(" .");
            
                /* 
                 * Remove the hyperlink from this Paragraph only. 
                 * Note a reference to the hyperlink will still exist in the document and it can thus be reused.
                 */
                p1.Hyperlinks[0].Remove();
            
                // Add a new Paragraph to this document and reuse the hyperlink h.
                Paragraph p2 = document.InsertParagraph();
                p2.Append("This is the same cool ").AppendHyperlink(h).Append(" .");
            
                document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="P:Novacode.Hyperlink.Text">
             <summary>
             Change the Text of a Hyperlink.
             </summary>
             <example>
             Change the Text of a Hyperlink.
             <code>
             // Create a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                // Get all of the hyperlinks in this document
                List&lt;Hyperlink&gt; hyperlinks = document.Hyperlinks;
                
                // Change the first hyperlinks text and Uri
                Hyperlink h0 = hyperlinks[0];
                h0.Text = "DocX";
                h0.Uri = new Uri("http://docx.codeplex.com");
            
                // Save this document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Hyperlink.Uri">
             <summary>
             Change the Uri of a Hyperlink.
             </summary>
             <example>
             Change the Uri of a Hyperlink.
             <code>
             <![CDATA[
             // Create a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                // Get all of the hyperlinks in this document
                List<Hyperlink> hyperlinks = document.Hyperlinks;
                
                // Change the first hyperlinks text and Uri
                Hyperlink h0 = hyperlinks[0];
                h0.Text = "DocX";
                h0.Uri = new Uri("http://docx.codeplex.com");
            
                // Save this document.
                document.Save();
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Novacode.List">
            <summary>
            Represents a List in a document.
            </summary>
        </member>
        <member name="P:Novacode.List.Items">
            <summary>
            This is a list of paragraphs that will be added to the document
            when the list is inserted into the document.
            The paragraph needs a numPr defined to be in this items collection.
            </summary>
        </member>
        <member name="P:Novacode.List.NumId">
            <summary>
            The numId used to reference the list settings in the numbering.xml
            </summary>
        </member>
        <member name="P:Novacode.List.ListType">
            <summary>
            The ListItemType (bullet or numbered) of the list.
            </summary>
        </member>
        <member name="M:Novacode.List.AddItem(Novacode.Paragraph)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="paragraph"></param>
            <exception cref="T:System.InvalidOperationException">
            Throws an InvalidOperationException if the item cannot be added to the list.
            </exception>
        </member>
        <member name="M:Novacode.List.CanAddListItem(Novacode.Paragraph)">
            <summary>
            Determine if it is able to add the item to the list
            </summary>
            <param name="paragraph"></param>
            <returns>
            Return true if AddItem(...) will succeed with the given paragraph.
            </returns>
        </member>
        <member name="M:Novacode.List.GetMaxNumId">
            <summary>
            Method to determine the last numId for a list element. 
            Also useful for determining the next numId to use for inserting a new list element into the document.
            </summary>
            <returns>
            0 if there are no elements in the list already.
            Increment the return for the next valid value of a new list element.
            </returns>
        </member>
        <member name="M:Novacode.List.GetMaxAbstractNumId">
            <summary>
            Method to determine the last abstractNumId for a list element.
            Also useful for determining the next abstractNumId to use for inserting a new list element into the document.
            </summary>
            <returns>
            -1 if there are no elements in the list already.
            Increment the return for the next valid value of a new list element.
            </returns>
        </member>
        <member name="M:Novacode.List.GetAbstractNum(System.Int32)">
            <summary>
            Get the abstractNum definition for the given numId
            </summary>
            <param name="numId">The numId on the pPr element</param>
            <returns>XElement representing the requested abstractNum</returns>
        </member>
        <member name="T:Novacode.PackagePartStream">
            <summary>
            OpenXML Isolated Storage access is not thread safe.
            Use app domain wide lock for writing.
            </summary>
        </member>
        <member name="T:Novacode.TableOfContents">
            <summary>
            Represents a table of contents in the document
            </summary>
        </member>
        <member name="T:Novacode.DocXElement">
            <summary>
            All DocX types are derived from DocXElement. 
            This class contains properties which every element of a DocX must contain.
            </summary>
        </member>
        <member name="P:Novacode.DocXElement.Xml">
            <summary>
            This is the actual Xml that gives this element substance. 
            For example, a Paragraphs Xml might look something like the following
            <p>
                <r>
                    <t>Hello World!</t>
                </r>
            </p>
            </summary>
        </member>
        <member name="P:Novacode.DocXElement.Document">
            <summary>
            This is a reference to the DocX object that this element belongs to.
            Every DocX element is connected to a document.
            </summary>
        </member>
        <member name="M:Novacode.DocXElement.#ctor(Novacode.DocX,System.Xml.Linq.XElement)">
            <summary>
            Store both the document and xml so that they can be accessed by derived types.
            </summary>
            <param name="document">The document that this element belongs to.</param>
            <param name="xml">The Xml that gives this element substance</param>
        </member>
        <member name="T:Novacode.InsertBeforeOrAfter">
            <summary>
            This class provides functions for inserting new DocXElements before or after the current DocXElement.
            Only certain DocXElements can support these functions without creating invalid documents, at the moment these are Paragraphs and Table.
            </summary>
        </member>
        <member name="T:Novacode.Table">
            <summary>
            Represents a Table in a document.
            </summary>
        </member>
        <member name="M:Novacode.Table.MergeCellsInColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Merge cells in given column starting with startRow and ending with endRow.
            </summary>
            <remarks>
            Added by arudoy patch: 11608
            </remarks>
        </member>
        <member name="P:Novacode.Table.Paragraphs">
            <summary>
            Returns a list of all Paragraphs inside this container.
            </summary>
            
        </member>
        <member name="P:Novacode.Table.Pictures">
             <summary>
             Returns a list of all Pictures in a Table.
             </summary>
             <example>
             Returns a list of all Pictures in a Table.
             <code>
             <![CDATA[
             // Create a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Get the first Table in a document.
                 Table t = document.Tables[0];
            
                 // Get all of the Pictures in this Table.
                 List<Picture> pictures = t.Pictures;
            
                 // Save this document.
                 document.Save();
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.SetDirection(Novacode.Direction)">
             <summary>
             Set the direction of all content in this Table.
             </summary>
             <param name="direction">(Left to Right) or (Right to Left)</param>
             <example>
             Set the content direction for all content in a table to RightToLeft.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Get the first table in a document.
                 Table table = document.Tables[0];
            
                 // Set the content direction for all content in this table to RightToLeft.
                 table.SetDirection(Direction.RightToLeft);
                
                 // Save all changes made to this document.
                 document.Save();
             }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Table.Hyperlinks">
             <summary>
             Get all of the Hyperlinks in this Table.
             </summary>
             <example>
             Get all of the Hyperlinks in this Table.
             <code>
             // Create a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Get the first Table in this document.
                 Table t = document.Tables[0];
            
                 // Get a list of all Hyperlinks in this Table.
                 List&lt;Hyperlink&gt; hyperlinks = t.Hyperlinks;
            
                 // Save this document.
                 document.Save();
             }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.SetWidthsPercentage(System.Single[],System.Nullable{System.Single})">
            <summary> 
            Set Table column width by prescribing percent 
            </summary> 
            <param name="widthsPercentage">column width % list</param> 
            <param name="totalWidth">Total table width. Will be calculated if null sent.</param>
        </member>
        <member name="M:Novacode.Table.GetOrCreate_tblPr">
            <summary>
            If the tblPr element doesent exist it is created, either way it is returned by this function.
            </summary>
            <returns>The tblPr element for this Table.</returns>
        </member>
        <member name="M:Novacode.Table.SetTableCellMargin(Novacode.TableCellMarginType,System.Double)">
            <summary>
            Set the specified cell margin for the table-level.
            </summary>
            <param name="type">The side of the cell margin.</param>
            <param name="margin">The value for the specified cell margin.</param>
            <remarks>More information can be found <see cref="!:http://msdn.microsoft.com/en-us/library/documentformat.openxml.wordprocessing.tablecellmargindefault.aspx">here</see></remarks>
        </member>
        <member name="M:Novacode.Table.GetColumnWidth(System.Int32)">
            <summary>
            Gets the column width for a given column index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Novacode.Table.SetColumnWidth(System.Int32,System.Double)">
            <summary>
            Sets the column width for the given index.
            </summary>
            <param name="index">Column index</param>
            <param name="width">Colum width</param>
        </member>
        <member name="P:Novacode.Table.ColumnWidths">
            <summary>
            Gets a list of all column widths for this table.
            </summary>
        </member>
        <member name="P:Novacode.Table.RowCount">
            <summary>
            Returns the number of rows in this table.
            </summary>
        </member>
        <member name="P:Novacode.Table.ColumnCount">
            <summary>
            Returns the number of columns in this table.
            </summary>
        </member>
        <member name="P:Novacode.Table.Rows">
            <summary>
            Returns a list of rows in this table.
            </summary>
        </member>
        <member name="F:Novacode.Table._customTableDesignName">
            <summary>
            Extra property for Custom Table Style provided by carpfisher - Thanks
            </summary>
        </member>
        <member name="P:Novacode.Table.CustomTableDesignName">
            <summary>
            Extra property for Custom Table Style provided by carpfisher - Thanks
            </summary>
        </member>
        <member name="F:Novacode.Table._tableCaption">
            <summary>
            String containing the Table Caption value (the table's Alternate Text Title)
            </summary>
        </member>
        <member name="P:Novacode.Table.TableCaption">
            <summary>
            Gets or Sets the value of the Table Caption (Alternate Text Title) of this table. 
            </summary>
        </member>
        <member name="F:Novacode.Table._tableDescription">
            <summary>
            String containing the Table Description (the table's Alternate Text Description).
            </summary>
        </member>
        <member name="P:Novacode.Table.TableDescription">
            <summary>
            Gets or Sets the value of the Table Description (Alternate Text Description) of this table. 
            </summary>
        </member>
        <member name="P:Novacode.Table.AutoFit">
            <summary>
            Auto size this table according to some rule.
            </summary>
            <remarks>Added by Roger Saele, April 2012. Thank you for your contribution Roger.</remarks>
        </member>
        <member name="P:Novacode.Table.Design">
            <summary>
            The design\style to apply to this table.
            
            Patch1. Patch to code for Custom Table Style support by carpfisher
            </summary>
            <example>
            Example code for custom table style usage 
            
            <code> 
            Novacode.DocX document = Novacode.DocX.Load(“DOC01.doc”); // load document with custom table style defined
            Novacode.Table t = document.AddTable(2, 2); // adds table 
            t.CustomTableDesignName = “MyStyle01”; // assigns Custom Table Design style to newly created table
            </code>
            </example>
            
            
            
        </member>
        <member name="P:Novacode.Table.Index">
             <summary>
             Returns the index of this Table.
             </summary>
             <example>
             Replace the first table in this document with a new Table.
             <code>
             // Load a document into memory.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Get the first Table in this document.
                 Table t = document.Tables[0];
            
                 // Get the character index of Table t in this document.
                 int index = t.Index;
            
                 // Remove Table t.
                 t.Remove();
            
                 // Insert a new Table at the original index of Table t.
                 Table newTable = document.InsertTable(index, 4, 4);
            
                 // Set the design of this new Table, so that we can see it.
                 newTable.Design = TableDesign.LightShadingAccent1;
            
                 // Save all changes made to the document.
                 document.Save();
             } // Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.Remove">
             <summary>
             Remove this Table from this document.
             </summary>
             <example>
             Remove the first Table from this document.
             <code>
             // Load a document into memory.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Get the first Table in this document.
                 Table t = d.Tables[0];
                    
                 // Remove this Table.
                 t.Remove();
            
                 // Save all changes made to the document.
                 document.Save();
             } // Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertRow">
             <summary>
             Insert a row at the end of this table.
             </summary>
             <example>
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first table in this document.
                 Table table = document.Tables[0];
                    
                 // Insert a new row at the end of this table.
                 Row row = table.InsertRow();
            
                 // Loop through each cell in this new row.
                 foreach (Cell c in row.Cells)
                 {
                     // Set the text of each new cell to "Hello".
                     c.Paragraphs[0].InsertText("Hello", false);
                 }
            
                 // Save the document to a new file.
                 document.SaveAs(@"C:\Example\Test2.docx");
             }// Release this document from memory.
             </code>
             </example>
             <returns>A new row.</returns>
        </member>
        <member name="M:Novacode.Table.InsertRow(Novacode.Row)">
            <summary>
            Insert a copy of a row at the end of this table.
            </summary>      
            <returns>A new row.</returns>
        </member>
        <member name="M:Novacode.Table.InsertColumn">
             <summary>
             Insert a column to the right of a Table.
             </summary>
             <example>
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first Table in this document.
                 Table table = document.Tables[0];
            
                 // Insert a new column to this right of this table.
                 table.InsertColumn();
            
                 // Set the new columns text to "Row no."
                 table.Rows[0].Cells[table.ColumnCount - 1].Paragraph.InsertText("Row no.", false);
            
                 // Loop through each row in the table.
                 for (int i = 1; i &lt; table.Rows.Count; i++)
                 {
                     // The current row.
                     Row row = table.Rows[i];
            
                     // The cell in this row that belongs to the new column.
                     Cell cell = row.Cells[table.ColumnCount - 1];
            
                     // The first Paragraph that this cell houses.
                     Paragraph p = cell.Paragraphs[0];
            
                     // Insert this rows index.
                     p.InsertText(i.ToString(), false);
                 }
            
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.RemoveRow">
             <summary>
             Remove the last row from this Table.
             </summary>
             <example>
             Remove the last row from a Table.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first table in this document.
                 Table table = document.Tables[0];
            
                 // Remove the last row from this table.
                 table.RemoveRow();
            
                 // Save the document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.RemoveRow(System.Int32)">
             <summary>
             Remove a row from this Table.
             </summary>
             <param name="index">The row to remove.</param>
             <example>
             Remove the first row from a Table.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first table in this document.
                 Table table = document.Tables[0];
            
                 // Remove the first row from this table.
                 table.RemoveRow(0);
            
                 // Save the document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.RemoveColumn">
             <summary>
             Remove the last column for this Table.
             </summary>
             <example>
             Remove the last column from a Table.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first table in this document.
                 Table table = document.Tables[0];
            
                 // Remove the last column from this table.
                 table.RemoveColumn();
            
                 // Save the document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.RemoveColumn(System.Int32)">
             <summary>
             Remove a column from this Table.
             </summary>
             <param name="index">The column to remove.</param>
             <example>
             Remove the first column from a Table.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first table in this document.
                 Table table = document.Tables[0];
            
                 // Remove the first column from this table.
                 table.RemoveColumn(0);
            
                 // Save the document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertRow(System.Int32)">
             <summary>
             Insert a row into this table.
             </summary>
             <example>
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first table in this document.
                 Table table = document.Tables[0];
                    
                 // Insert a new row at index 1 in this table.
                 Row row = table.InsertRow(1);
            
                 // Loop through each cell in this new row.
                 foreach (Cell c in row.Cells)
                 {
                     // Set the text of each new cell to "Hello".
                     c.Paragraphs[0].InsertText("Hello", false);
                 }
            
                 // Save the document to a new file.
                 document.SaveAs(@"C:\Example\Test2.docx");
             }// Release this document from memory.
             </code>
             </example>
             <param name="index">Index to insert row at.</param>
             <returns>A new Row</returns>
        </member>
        <member name="M:Novacode.Table.InsertRow(Novacode.Row,System.Int32)">
            <summary>
            Insert a copy of a row into this table.
            </summary>
            <param name="row">Row to copy and insert.</param>
            <param name="index">Index to insert row at.</param>
            <returns>A new Row</returns>
        </member>
        <member name="M:Novacode.Table.InsertColumn(System.Int32,System.Boolean)">
             <summary>
             Insert a column into a table.
             </summary>
             <param name="index">The index to insert the column at.</param>
             <param name="direction">The side in which you wish to place the colum(True right, false left)</param>
             <example>
             Insert a column to the left of a table.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Get the first Table in this document.
                 Table table = document.Tables[0];
            
                 // Insert a new column to this left of this table.
                 table.InsertColumn(0, false);
            
                 // Set the new columns text to "Row no."
                 table.Rows[0].Cells[table.ColumnCount - 1].Paragraph.InsertText("Row no.", false);
            
                 // Loop through each row in the table.
                 for (int i = 1; i &lt; table.Rows.Count; i++)
                 {
                     // The current row.
                     Row row = table.Rows[i];
            
                     // The cell in this row that belongs to the new column.
                     Cell cell = row.Cells[table.ColumnCount - 1];
            
                     // The first Paragraph that this cell houses.
                     Paragraph p = cell.Paragraphs[0];
            
                     // Insert this rows index.
                     p.InsertText(i.ToString(), false);
                 }
            
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.AddCellToRow(Novacode.Row,System.Xml.Linq.XElement,System.Int32,System.Boolean)">
            <summary>
            Adds a cell to the right or left of a cell
            </summary>
            <param name="row">is the row you are adding</param>
            <param name="cell">is the cell you are adding</param>
            <param name="index">the cell index position you are refferencing from</param>
            <param name="direction">which side of the cell you wish to add cell</param>
        </member>
        <member name="M:Novacode.Table.DeleteAndShiftCellsLeft(System.Int32,System.Int32)">
            <summary>
            Deletes a cell in a row
            </summary>
            <param name="rowIndex">index of the row you want to remove the cell</param>
            <param name="celIndex">index of the cell you want to remove</param>
        </member>
        <member name="M:Novacode.Table.InsertPageBreakBeforeSelf">
             <summary>
             Insert a page break before a Table.
             </summary>
             <example>
             Insert a Table and a Paragraph into a document with a page break between them.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {              
                 // Insert a new Paragraph.
                 Paragraph p1 = document.InsertParagraph("Paragraph", false);
            
                 // Insert a new Table.
                 Table t1 = document.InsertTable(2, 2);
                 t1.Design = TableDesign.LightShadingAccent1;
                 
                 // Insert a page break before this Table.
                 t1.InsertPageBreakBeforeSelf();
                 
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertPageBreakAfterSelf">
             <summary>
             Insert a page break after a Table.
             </summary>
             <example>
             Insert a Table and a Paragraph into a document with a page break between them.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Table.
                 Table t1 = document.InsertTable(2, 2);
                 t1.Design = TableDesign.LightShadingAccent1;
                    
                 // Insert a page break after this Table.
                 t1.InsertPageBreakAfterSelf();
                    
                 // Insert a new Paragraph.
                 Paragraph p1 = document.InsertParagraph("Paragraph", false);
            
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertTableBeforeSelf(Novacode.Table)">
             <summary>
             Insert a new Table before this Table, this Table can be from this document or another document.
             </summary>
             <param name="t">The Table t to be inserted</param>
             <returns>A new Table inserted before this Table.</returns>
             <example>
             Insert a new Table before this Table.
             <code>
             // Place holder for a Table.
             Table t;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first Table from this document.
                 t = documentA.Tables[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Table in document b.
                 Table t2 = documentB.Tables[0];
            
                 // Insert the Table from document a before this Table.
                 Table newTable = t2.InsertTableBeforeSelf(t);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertTableBeforeSelf(System.Int32,System.Int32)">
             <summary>
             Insert a new Table into this document before this Table.
             </summary>
             <param name="rowCount">The number of rows this Table should have.</param>
             <param name="columnCount">The number of columns this Table should have.</param>
             <returns>A new Table inserted before this Table.</returns>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 //Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
                 t.Design = TableDesign.LightShadingAccent1;
                 t.Alignment = Alignment.center;
                 
                 // Insert a new Table before this Table.
                 Table newTable = t.InsertTableBeforeSelf(2, 2);
                 newTable.Design = TableDesign.LightShadingAccent2;
                 newTable.Alignment = Alignment.center;
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertTableAfterSelf(Novacode.Table)">
             <summary>
             Insert a new Table after this Table, this Table can be from this document or another document.
             </summary>
             <param name="t">The Table t to be inserted</param>
             <returns>A new Table inserted after this Table.</returns>
             <example>
             Insert a new Table after this Table.
             <code>
             // Place holder for a Table.
             Table t;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first Table from this document.
                 t = documentA.Tables[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Table in document b.
                 Table t2 = documentB.Tables[0];
            
                 // Insert the Table from document a after this Table.
                 Table newTable = t2.InsertTableAfterSelf(t);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertTableAfterSelf(System.Int32,System.Int32)">
             <summary>
             Insert a new Table into this document after this Table.
             </summary>
             <param name="rowCount">The number of rows this Table should have.</param>
             <param name="columnCount">The number of columns this Table should have.</param>
             <returns>A new Table inserted before this Table.</returns>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 //Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
                 t.Design = TableDesign.LightShadingAccent1;
                 t.Alignment = Alignment.center;
                 
                 // Insert a new Table after this Table.
                 Table newTable = t.InsertTableAfterSelf(2, 2);
                 newTable.Design = TableDesign.LightShadingAccent2;
                 newTable.Alignment = Alignment.center;
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphBeforeSelf(Novacode.Paragraph)">
             <summary>
             Insert a Paragraph before this Table, this Paragraph may have come from the same or another document.
             </summary>
             <param name="p">The Paragraph to insert.</param>
             <returns>The Paragraph now associated with this document.</returns>
             <example>
             Take a Paragraph from document a, and insert it into document b before this Table.
             <code>
             // Place holder for a Paragraph.
             Paragraph p;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first paragraph from this document.
                 p = documentA.Paragraphs[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Table in document b.
                 Table t = documentB.Tables[0];
            
                 // Insert the Paragraph from document a before this Table.
                 Paragraph newParagraph = t.InsertParagraphBeforeSelf(p);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code> 
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphBeforeSelf(System.String)">
             <summary>
             Insert a new Paragraph before this Table.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <returns>A new Paragraph inserted before this Table.</returns>
             <example>
             Insert a new Paragraph before the first Table in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
            
                 t.InsertParagraphBeforeSelf("I was inserted before the next Table.");
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphBeforeSelf(System.String,System.Boolean)">
             <summary>
             Insert a new Paragraph before this Table.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <returns>A new Paragraph inserted before this Table.</returns>
             <example>
             Insert a new paragraph before the first Table in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
            
                 t.InsertParagraphBeforeSelf("I was inserted before the next Table.", false);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphBeforeSelf(System.String,System.Boolean,Novacode.Formatting)">
             <summary>
             Insert a new Paragraph before this Table.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <param name="formatting">The formatting to apply to this insertion.</param>
             <returns>A new Paragraph inserted before this Table.</returns>
             <example>
             Insert a new paragraph before the first Table in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
            
                 Formatting boldFormatting = new Formatting();
                 boldFormatting.Bold = true;
            
                 t.InsertParagraphBeforeSelf("I was inserted before the next Table.", false, boldFormatting);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphAfterSelf(Novacode.Paragraph)">
             <summary>
             Insert a Paragraph after this Table, this Paragraph may have come from the same or another document.
             </summary>
             <param name="p">The Paragraph to insert.</param>
             <returns>The Paragraph now associated with this document.</returns>
             <example>
             Take a Paragraph from document a, and insert it into document b after this Table.
             <code>
             // Place holder for a Paragraph.
             Paragraph p;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first paragraph from this document.
                 p = documentA.Paragraphs[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Table in document b.
                 Table t = documentB.Tables[0];
            
                 // Insert the Paragraph from document a after this Table.
                 Paragraph newParagraph = t.InsertParagraphAfterSelf(p);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code> 
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphAfterSelf(System.String,System.Boolean,Novacode.Formatting)">
             <summary>
             Insert a new Paragraph after this Table.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <param name="formatting">The formatting to apply to this insertion.</param>
             <returns>A new Paragraph inserted after this Table.</returns>
             <example>
             Insert a new paragraph after the first Table in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
            
                 Formatting boldFormatting = new Formatting();
                 boldFormatting.Bold = true;
            
                 t.InsertParagraphAfterSelf("I was inserted after the previous Table.", false, boldFormatting);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphAfterSelf(System.String,System.Boolean)">
             <summary>
             Insert a new Paragraph after this Table.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <returns>A new Paragraph inserted after this Table.</returns>
             <example>
             Insert a new paragraph after the first Table in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
            
                 t.InsertParagraphAfterSelf("I was inserted after the previous Table.", false);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.InsertParagraphAfterSelf(System.String)">
             <summary>
             Insert a new Paragraph after this Table.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <returns>A new Paragraph inserted after this Table.</returns>
             <example>
             Insert a new Paragraph after the first Table in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Table into this document.
                 Table t = document.InsertTable(2, 2);
            
                 t.InsertParagraphAfterSelf("I was inserted after the previous Table.");
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Table.SetBorder(Novacode.TableBorderType,Novacode.Border)">
             <summary>
             Set a table border
             Added by lckuiper @ 20101117
             </summary>
             <example>
             <code>
             // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Insert a table into this document.
                Table t = document.InsertTable(3, 3);
            
                // Create a large blue border.
                Border b = new Border(BorderStyle.Tcbs_single, BorderSize.seven, 0, Color.Blue);
            
                // Set the tables Top, Bottom, Left and Right Borders to b.
                t.SetBorder(TableBorderType.Top, b);
                t.SetBorder(TableBorderType.Bottom, b);
                t.SetBorder(TableBorderType.Left, b);
                t.SetBorder(TableBorderType.Right, b);
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
             <param name="borderType">The table border to set</param>
             <param name="border">Border object to set the table border</param>
        </member>
        <member name="M:Novacode.Table.GetBorder(Novacode.TableBorderType)">
            <summary>
            Get a table border
            Added by lckuiper @ 20101117
            </summary>
            <param name="borderType">The table border to get</param>
        </member>
        <member name="T:Novacode.Row">
            <summary>
            Represents a single row in a Table.
            </summary>
        </member>
        <member name="P:Novacode.Row.ColumnCount">
            <summary>
            Calculates columns count in the row, taking spanned cells into account
            </summary>
        </member>
        <member name="P:Novacode.Row.gridAfter">
            <summary>
            Returns the GridAfter of a row ie. The amount of cells that are deleted
            </summary>
        </member>
        <member name="P:Novacode.Row.Cells">
            <summary>
            A list of Cells in this Row.
            </summary>
        </member>
        <member name="F:Novacode.Row._hRule_Exact">
            <summary>
            The property name to set when specifiying an exact height
            </summary>
            <created>Nick Kusters</created>
        </member>
        <member name="F:Novacode.Row._hRule_AtLeast">
            <summary>
            The property name to set when specifying a minimum height
            </summary>
            <created>Nick Kusters</created>
        </member>
        <member name="P:Novacode.Row.Height">
            <summary>
            Height in pixels. // Added by Joel, refactored by Cathal.
            </summary>
        </member>
        <member name="M:Novacode.Row.SetHeight(System.Double,System.Boolean)">
            <summary>
            Helper method to set either the exact height or the min-height
            </summary>
            <param name="height">The height value to set (in pixels)</param>
            <param name="exact">
            If true, the height will be forced. 
            If false, it will be treated as a minimum height, auto growing past it if need be.
            </param>
            <created>Nick Kusters</created>
        </member>
        <member name="P:Novacode.Row.MinHeight">
            <summary>
            Min-Height in pixels. // Added by Nick Kusters.
            </summary>
            <remarks>
            Value will be treated as a minimum height, auto growing past it if need be.
            </remarks>
            <created>Nick Kusters</created>
        </member>
        <member name="P:Novacode.Row.TableHeader">
            <summary>
            Set to true to make this row the table header row that will be repeated on each page
            </summary>
        </member>
        <member name="P:Novacode.Row.BreakAcrossPages">
            <summary>
            Allow row to break across pages. 
            The default value is true: Word will break the contents of the row across pages. 
            If set to false, the contents of the row will not be split across pages, the entire row will be moved to the next page instead.
            </summary>
        </member>
        <member name="M:Novacode.Row.MergeCells(System.Int32,System.Int32)">
            <summary>
            Merge cells starting with startIndex and ending with endIndex.
            </summary>
        </member>
        <member name="P:Novacode.Cell.GridSpan">
            <summary>
            Returns the GridSpan of a specific Cell ie. How many cells are merged
            </summary>
        </member>
        <member name="P:Novacode.Cell.VerticalAlignment">
             <summary>
             Gets or Sets this Cells vertical alignment.
             </summary>
             <!--Patch 7398 added by lckuiper on Nov 16th 2010 @ 2:23 PM-->
             <example>
             Creates a table with 3 cells and sets the vertical alignment of each to 1 of the 3 available options.
             <code>
             // Create a new document.
            using(DocX document = DocX.Create("Test.docx"))
            {
                // Insert a Table into this document.
                Table t = document.InsertTable(3, 1);
            
                // Set the design of the Table such that we can easily identify cell boundaries.
                t.Design = TableDesign.TableGrid;
            
                // Set the height of the row bigger than default.
                // We need to be able to see the difference in vertical cell alignment options.
                t.Rows[0].Height = 100;
            
                // Set the vertical alignment of cell0 to top.
                Cell c0 = t.Rows[0].Cells[0];
                c0.InsertParagraph("VerticalAlignment.Top");
                c0.VerticalAlignment = VerticalAlignment.Top;
            
                // Set the vertical alignment of cell1 to center.
                Cell c1 = t.Rows[0].Cells[1];
                c1.InsertParagraph("VerticalAlignment.Center");
                c1.VerticalAlignment = VerticalAlignment.Center;
            
                // Set the vertical alignment of cell2 to bottom.
                Cell c2 = t.Rows[0].Cells[2];
                c2.InsertParagraph("VerticalAlignment.Bottom");
                c2.VerticalAlignment = VerticalAlignment.Bottom;
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Cell.Width">
            <summary>
            Width in pixels. // Added by Joel, refactored by Cathal
            </summary>
        </member>
        <member name="P:Novacode.Cell.MarginLeft">
             <summary>
             LeftMargin in pixels. // Added by lckuiper
             </summary>
             <example>
             <code>
             // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Insert table into this document.
                Table t = document.InsertTable(3, 3);
                t.Design = TableDesign.TableGrid;
            
                // Get the center cell.
                Cell center = t.Rows[1].Cells[1];
            
                // Insert some text so that we can see the effect of the Margins.
                center.Paragraphs[0].Append("Center Cell");
            
                // Set the center cells Left, Margin to 10.
                center.MarginLeft = 25;
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Cell.MarginRight">
             <summary>
             RightMargin in pixels. // Added by lckuiper
             </summary>
             <example>
             <code>
             // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Insert table into this document.
                Table t = document.InsertTable(3, 3);
                t.Design = TableDesign.TableGrid;
            
                // Get the center cell.
                Cell center = t.Rows[1].Cells[1];
            
                // Insert some text so that we can see the effect of the Margins.
                center.Paragraphs[0].Append("Center Cell");
            
                // Set the center cells Right, Margin to 10.
                center.MarginRight = 25;
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Cell.MarginTop">
             <summary>
             TopMargin in pixels. // Added by lckuiper
             </summary>
             <example>
             <code>
             // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Insert table into this document.
                Table t = document.InsertTable(3, 3);
                t.Design = TableDesign.TableGrid;
            
                // Get the center cell.
                Cell center = t.Rows[1].Cells[1];
            
                // Insert some text so that we can see the effect of the Margins.
                center.Paragraphs[0].Append("Center Cell");
            
                // Set the center cells Top, Margin to 10.
                center.MarginTop = 25;
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Cell.MarginBottom">
             <summary>
             BottomMargin in pixels. // Added by lckuiper
             </summary>
             <example>
             <code>
             // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Insert table into this document.
                Table t = document.InsertTable(3, 3);
                t.Design = TableDesign.TableGrid;
            
                // Get the center cell.
                Cell center = t.Rows[1].Cells[1];
            
                // Insert some text so that we can see the effect of the Margins.
                center.Paragraphs[0].Append("Center Cell");
            
                // Set the center cells Top, Margin to 10.
                center.MarginBottom = 25;
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Cell.SetBorder(Novacode.TableCellBorderType,Novacode.Border)">
             <summary>
             Set the table cell border
             Added by lckuiper @ 20101117
             </summary>
             <example>
             <code>
             // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Insert a table into this document.
                Table t = document.InsertTable(3, 3);
            
                // Get the center cell.
                Cell center = t.Rows[1].Cells[1];
            
                // Create a large blue border.
                Border b = new Border(BorderStyle.Tcbs_single, BorderSize.seven, 0, Color.Blue);
            
                // Set the center cells Top, Bottom, Left and Right Borders to b.
                center.SetBorder(TableCellBorderType.Top, b);
                center.SetBorder(TableCellBorderType.Bottom, b);
                center.SetBorder(TableCellBorderType.Left, b);
                center.SetBorder(TableCellBorderType.Right, b);
            
                // Save the document.
                document.Save();
            }
             </code>
             </example>
             <param name="borderType">Table Cell border to set</param>
             <param name="border">Border object to set the table cell border</param>
        </member>
        <member name="M:Novacode.Cell.GetBorder(Novacode.TableCellBorderType)">
            <summary>
            Get a table cell border
            Added by lckuiper @ 20101117
            </summary>
            <param name="borderType">The table cell border to get</param>
        </member>
        <member name="P:Novacode.Cell.FillColor">
             <summary>
             Gets or Sets the fill color of this Cell.
             </summary>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create("Test.docx"))
             {
                // Insert a table into this document.
                Table t = document.InsertTable(3, 3);
            
                // Fill the first cell as Blue.
                t.Rows[0].Cells[0].FillColor = Color.Blue;
                // Fill the middle cell as Red.
                t.Rows[1].Cells[1].FillColor = Color.Red;
                // Fill the last cell as Green.
                t.Rows[2].Cells[2].FillColor = Color.Green;
            
                // Save the document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="T:Novacode.BorderStyle">
            <summary>
            Table Cell Border styles
            Added by lckuiper @ 20101117
            source: http://msdn.microsoft.com/en-us/library/documentformat.openxml.wordprocessing.tablecellborders.aspx
            </summary>
        </member>
        <member name="T:Novacode.TableCellBorderType">
            <summary>
            Table Cell Border Types
            Added by lckuiper @ 20101117
            source: http://msdn.microsoft.com/en-us/library/documentformat.openxml.wordprocessing.tablecellborders.aspx
            </summary>
        </member>
        <member name="T:Novacode.TableBorderType">
            <summary>
            Table Border Types
            Added by lckuiper @ 20101117
            source: http://msdn.microsoft.com/en-us/library/documentformat.openxml.wordprocessing.tableborders.aspx
            </summary>
        </member>
        <member name="T:Novacode.CapsStyle">
            <summary>
            Change the caps style of text, for use with Append and AppendLine.
            </summary>
        </member>
        <member name="F:Novacode.CapsStyle.none">
            <summary>
            No caps, make all characters are lowercase.
            </summary>
        </member>
        <member name="F:Novacode.CapsStyle.caps">
            <summary>
            All caps, make every character uppercase.
            </summary>
        </member>
        <member name="F:Novacode.CapsStyle.smallCaps">
            <summary>
            Small caps, make all characters capital but with a small font size.
            </summary>
        </member>
        <member name="T:Novacode.TableDesign">
            <summary>
            Designs\Styles that can be applied to a table.
            </summary>
        </member>
        <member name="T:Novacode.AutoFit">
            <summary>
            How a Table should auto resize.
            </summary>
        </member>
        <member name="F:Novacode.AutoFit.Contents">
            <summary>
            Autofit to Table contents.
            </summary>
        </member>
        <member name="F:Novacode.AutoFit.Window">
            <summary>
            Autofit to Window.
            </summary>
        </member>
        <member name="F:Novacode.AutoFit.ColumnWidth">
            <summary>
            Autofit to Column width.
            </summary>
        </member>
        <member name="F:Novacode.AutoFit.Fixed">
            <summary>
             Autofit to Fixed column width
            </summary>
        </member>
        <member name="T:Novacode.Alignment">
            <summary>
            Text alignment of a Paragraph.
            </summary>
        </member>
        <member name="F:Novacode.Alignment.left">
            <summary>
            Align Paragraph to the left.
            </summary>
        </member>
        <member name="F:Novacode.Alignment.center">
            <summary>
            Align Paragraph as centered.
            </summary>
        </member>
        <member name="F:Novacode.Alignment.right">
            <summary>
            Align Paragraph to the right.
            </summary>
        </member>
        <member name="F:Novacode.Alignment.both">
            <summary>
            (Justified) Align Paragraph to both the left and right margins, adding extra space between content as necessary.
            </summary>
        </member>
        <member name="T:Novacode.EditType">
            <summary>
            Paragraph edit types
            </summary>
        </member>
        <member name="F:Novacode.EditType.ins">
            <summary>
            A ins is a tracked insertion
            </summary>
        </member>
        <member name="F:Novacode.EditType.del">
            <summary>
            A del is  tracked deletion
            </summary>
        </member>
        <member name="T:Novacode.CustomPropertyType">
            <summary>
            Custom property types.
            </summary>
        </member>
        <member name="F:Novacode.CustomPropertyType.Text">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:Novacode.CustomPropertyType.Date">
            <summary>
            System.DateTime
            </summary>
        </member>
        <member name="F:Novacode.CustomPropertyType.NumberInteger">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:Novacode.CustomPropertyType.NumberDecimal">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:Novacode.CustomPropertyType.YesOrNo">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="T:Novacode.RunTextType">
            <summary>
            Text types in a Run
            </summary>
        </member>
        <member name="F:Novacode.RunTextType.Text">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:Novacode.RunTextType.DelText">
            <summary>
            System.String
            </summary>
        </member>
        <member name="T:Novacode.TableCellMarginType">
            <summary>
            Cell margin for all sides of the table cell.
            </summary>
        </member>
        <member name="F:Novacode.TableCellMarginType.left">
            <summary>
            The left cell margin.
            </summary>
        </member>
        <member name="F:Novacode.TableCellMarginType.right">
            <summary>
            The right cell margin.
            </summary>
        </member>
        <member name="F:Novacode.TableCellMarginType.bottom">
            <summary>
            The bottom cell margin.
            </summary>
        </member>
        <member name="F:Novacode.TableCellMarginType.top">
            <summary>
            The top cell margin.
            </summary>
        </member>
        <member name="T:Novacode.TableOfContentsSwitches">
            <summary>
            Represents the switches set on a TOC.
            </summary>
        </member>
        <member name="T:Novacode.Formatting">
            <summary>
            A text formatting.
            </summary>
        </member>
        <member name="M:Novacode.Formatting.#ctor">
            <summary>
            A text formatting.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Language">
            <summary>
            Text language
            </summary>
        </member>
        <member name="M:Novacode.Formatting.Clone">
            <summary>
            Returns a new identical instance of Formatting.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Novacode.Formatting.Bold">
            <summary>
            This formatting will apply Bold.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Italic">
            <summary>
            This formatting will apply Italic.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.StrikeThrough">
            <summary>
            This formatting will apply StrickThrough.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Script">
            <summary>
            The script that this formatting should be, normal, superscript or subscript.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Size">
            <summary>
            The Size of this text, must be between 0 and 1638.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.PercentageScale">
            <summary>
            Percentage scale must be one of the following values 200, 150, 100, 90, 80, 66, 50 or 33.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Kerning">
            <summary>
            The Kerning to apply to this text must be one of the following values 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Position">
            <summary>
            Text position must be in the range (-1585 - 1585).
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Spacing">
            <summary>
            Text spacing must be in the range (-1585 - 1585).
            </summary>
        </member>
        <member name="P:Novacode.Formatting.FontColor">
            <summary>
            The colour of the text.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Highlight">
            <summary>
            Highlight colour.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.UnderlineStyle">
            <summary>
            The Underline style that this formatting applies.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.UnderlineColor">
            <summary>
            The underline colour.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Misc">
            <summary>
            Misc settings.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.Hidden">
            <summary>
            Is this text hidden or visible.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.CapsStyle">
            <summary>
            Capitalization style.
            </summary>
        </member>
        <member name="P:Novacode.Formatting.FontFamily">
            <summary>
            The font family of this formatting.
            </summary>
            <!-- 
            Bug found and fixed by krugs525 on August 12 2009.
            Use TFS compare to see exact code change.
            -->
        </member>
        <member name="T:Novacode.Image">
            <summary>
            Represents an Image embedded in a document.
            </summary>
        </member>
        <member name="F:Novacode.Image.id">
            <summary>
            A unique id which identifies this Image.
            </summary>
        </member>
        <member name="P:Novacode.Image.Id">
            <summary>
            Returns the id of this Image.
            </summary>
        </member>
        <member name="M:Novacode.Image.CreatePicture">
             <summary>
             Add an image to a document, create a custom view of that image (picture) and then insert it into a Paragraph using append.
             </summary>
             <returns></returns>
             <example>
             Add an image to a document, create a custom view of that image (picture) and then insert it into a Paragraph using append.
             <code>
             using (DocX document = DocX.Create("Test.docx"))
             {
                // Add an image to the document. 
                Image     i = document.AddImage(@"Image.jpg");
                
                // Create a picture i.e. (A custom view of an image)
                Picture   p = i.CreatePicture();
                p.FlipHorizontal = true;
                p.Rotation = 10;
            
                // Create a new Paragraph.
                Paragraph par = document.InsertParagraph();
                
                // Append content to the Paragraph.
                par.Append("Here is a cool picture")
                   .AppendPicture(p)
                   .Append(" don't you think so?");
            
                // Save all changes made to this document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Image.FileName">
            <summary>
             Returns the name of the image file.
            </summary>
        </member>
        <member name="T:Novacode.Picture">
            <summary>
            Represents a Picture in this document, a Picture is a customized view of an Image.
            </summary>
        </member>
        <member name="M:Novacode.Picture.Remove">
            <summary>
            Remove this Picture from this document.
            </summary>
        </member>
        <member name="M:Novacode.Picture.#ctor(Novacode.DocX,System.Xml.Linq.XElement,Novacode.Image)">
            <summary>
            Wraps an XElement as an Image
            </summary>
            <param name="document"></param>
            <param name="i">The XElement i to wrap</param>
            <param name="img"></param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.BasicShapes)">
            <summary>
            Set the shape of this Picture to one in the BasicShapes enumeration.
            </summary>
            <param name="shape">A shape from the BasicShapes enumeration.</param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.RectangleShapes)">
            <summary>
            Set the shape of this Picture to one in the RectangleShapes enumeration.
            </summary>
            <param name="shape">A shape from the RectangleShapes enumeration.</param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.BlockArrowShapes)">
            <summary>
            Set the shape of this Picture to one in the BlockArrowShapes enumeration.
            </summary>
            <param name="shape">A shape from the BlockArrowShapes enumeration.</param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.EquationShapes)">
            <summary>
            Set the shape of this Picture to one in the EquationShapes enumeration.
            </summary>
            <param name="shape">A shape from the EquationShapes enumeration.</param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.FlowchartShapes)">
            <summary>
            Set the shape of this Picture to one in the FlowchartShapes enumeration.
            </summary>
            <param name="shape">A shape from the FlowchartShapes enumeration.</param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.StarAndBannerShapes)">
            <summary>
            Set the shape of this Picture to one in the StarAndBannerShapes enumeration.
            </summary>
            <param name="shape">A shape from the StarAndBannerShapes enumeration.</param>
        </member>
        <member name="M:Novacode.Picture.SetPictureShape(Novacode.CalloutShapes)">
            <summary>
            Set the shape of this Picture to one in the CalloutShapes enumeration.
            </summary>
            <param name="shape">A shape from the CalloutShapes enumeration.</param>
        </member>
        <member name="P:Novacode.Picture.Id">
            <summary>
            A unique id that identifies an Image embedded in this document.
            </summary>
        </member>
        <member name="P:Novacode.Picture.FlipHorizontal">
            <summary>
            Flip this Picture Horizontally.
            </summary>
        </member>
        <member name="P:Novacode.Picture.FlipVertical">
            <summary>
            Flip this Picture Vertically.
            </summary>
        </member>
        <member name="P:Novacode.Picture.Rotation">
            <summary>
            The rotation in degrees of this image, actual value = value % 360
            </summary>
        </member>
        <member name="P:Novacode.Picture.Name">
            <summary>
            Gets or sets the name of this Image.
            </summary>
        </member>
        <member name="P:Novacode.Picture.Description">
            <summary>
            Gets or sets the description for this Image.
            </summary>
        </member>
        <member name="P:Novacode.Picture.FileName">
            <summary>
             Returns the name of the image file for the picture.
            </summary>
        </member>
        <member name="P:Novacode.Picture.Width">
            <summary>
            Get or sets the Width of this Image.
            </summary>
        </member>
        <member name="P:Novacode.Picture.Height">
            <summary>
            Get or sets the height of this Image.
            </summary>
        </member>
        <member name="T:Novacode.Paragraph">
            <summary>
            Represents a document paragraph.
            </summary>
        </member>
        <member name="P:Novacode.Paragraph.ParagraphNumberProperties">
            <summary>
            Fetch the paragraph number properties for a list element.
            </summary>
        </member>
        <member name="P:Novacode.Paragraph.IsListItem">
            <summary>
            Determine if this paragraph is a list element.
            </summary>
        </member>
        <member name="P:Novacode.Paragraph.IndentLevel">
            <summary>
            If this element is a list item, get the indentation level of the list item.
            </summary>
        </member>
        <member name="F:Novacode.Paragraph.ListItemType">
            <summary>
            Determine if the list element is a numbered list of bulleted list element
            </summary>
        </member>
        <member name="P:Novacode.Paragraph.Pictures">
             <summary>
             Returns a list of all Pictures in a Paragraph.
             </summary>
             <example>
             Returns a list of all Pictures in a Paragraph.
             <code>
             <![CDATA[
             // Create a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                // Get the first Paragraph in a document.
                Paragraph p = document.Paragraphs[0];
             
                // Get all of the Pictures in this Paragraph.
                List<Picture> pictures = p.Pictures;
            
                // Save this document.
                document.Save();
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.Hyperlinks">
             <summary>
             Returns a list of Hyperlinks in this Paragraph.
             </summary>
             <example>
             <code>
             // Create a document.
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                // Get the first Paragraph in this document.
                Paragraph p = document.Paragraphs[0];
                
                // Get all of the hyperlinks in this Paragraph.
                <![CDATA[ List<Hyperlink> ]]> hyperlinks = paragraph.Hyperlinks;
                
                // Change the first hyperlinks text and Uri
                Hyperlink h0 = hyperlinks[0];
                h0.Text = "DocX";
                h0.Uri = new Uri("http://docx.codeplex.com");
            
                // Save this document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.StyleName">
            <summary>
             The style name of the paragraph.
            </summary>
        </member>
        <member name="P:Novacode.Paragraph.DocumentProperties">
            <summary>
            Returns a list of field type DocProperty in this document.
            </summary>
        </member>
        <member name="M:Novacode.Paragraph.InsertTableBeforeSelf(Novacode.Table)">
             <summary>
             Insert a new Table before this Paragraph, this Table can be from this document or another document.
             </summary>
             <param name="t">The Table t to be inserted.</param>
             <returns>A new Table inserted before this Paragraph.</returns>
             <example>
             Insert a new Table before this Paragraph.
             <code>
             // Place holder for a Table.
             Table t;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first Table from this document.
                 t = documentA.Tables[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Paragraph in document b.
                 Paragraph p2 = documentB.Paragraphs[0];
            
                 // Insert the Table from document a before this Paragraph.
                 Table newTable = p2.InsertTableBeforeSelf(t);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.Direction">
            <summary>
            Gets or Sets the Direction of content in this Paragraph.
            <example>
            Create a Paragraph with content that flows right to left. Default is left to right.
            <code>
            // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Create a new Paragraph with the text "Hello World".
                Paragraph p = document.InsertParagraph("Hello World.");
            
                // Make this Paragraph flow right to left. Default is left to right.
                p.Direction = Direction.RightToLeft;
                
                // Save all changes made to this document.
                document.Save();
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Novacode.Paragraph.KeepWithNext(System.Boolean)">
            <summary>
            This paragraph will be kept on the same page as the next paragraph
            </summary>
            <example>
            Create a Paragraph that will stay on the same page as the paragraph that comes next
            <code>
            // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            
            {
                // Create a new Paragraph with the text "Hello World".
                Paragraph p = document.InsertParagraph("Hello World.");
                p.KeepWithNext();
                document.InsertParagraph("Previous paragraph will appear on the same page as this paragraph");
                // Save all changes made to this document.
                document.Save();
            }
            </code>
            </example>
            <param name="keepWithNext"></param>
            <returns></returns>
        </member>
        <member name="M:Novacode.Paragraph.KeepLinesTogether(System.Boolean)">
            <summary>
            Keep all lines in this paragraph together on a page
            </summary>
            <example>
            Create a Paragraph whose lines will stay together on a single page
            <code>
            // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Create a new Paragraph with the text "Hello World".
                Paragraph p = document.InsertParagraph("All lines of this paragraph will appear on the same page...\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6...");
                p.KeepLinesTogether();
                // Save all changes made to this document.
                document.Save();
            }
            </code>
            </example>
            <param name="keepTogether"></param>
            <returns></returns>
        </member>
        <member name="M:Novacode.Paragraph.GetOrCreate_pPr">
            <summary>
            If the pPr element doesent exist it is created, either way it is returned by this function.
            </summary>
            <returns>The pPr element for this Paragraph.</returns>
        </member>
        <member name="M:Novacode.Paragraph.GetOrCreate_pPr_ind">
            <summary>
            If the ind element doesent exist it is created, either way it is returned by this function.
            </summary>
            <returns>The ind element for this Paragraphs pPr.</returns>
        </member>
        <member name="P:Novacode.Paragraph.IndentationFirstLine">
            <summary>
            Get or set the indentation of the first line of this Paragraph.
            </summary>
            <example>
            Indent only the first line of a Paragraph.
            <code>
            // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Create a new Paragraph.
                Paragraph p = document.InsertParagraph("Line 1\nLine 2\nLine 3");
            
                // Indent only the first line of the Paragraph.
                p.IndentationFirstLine = 2.0f;
                
                // Save all changes made to this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="P:Novacode.Paragraph.IndentationHanging">
            <summary>
            Get or set the indentation of all but the first line of this Paragraph.
            </summary>
            <example>
            Indent all but the first line of a Paragraph.
            <code>
            // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Create a new Paragraph.
                Paragraph p = document.InsertParagraph("Line 1\nLine 2\nLine 3");
            
                // Indent all but the first line of the Paragraph.
                p.IndentationHanging = 1.0f;
                
                // Save all changes made to this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="P:Novacode.Paragraph.IndentationBefore">
             <summary>
             Set the before indentation in cm for this Paragraph.
             </summary>
             <example>
             // Indent an entire Paragraph from the left.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create("Test.docx"))
             {
                // Create a new Paragraph.
                Paragraph p = document.InsertParagraph("Line 1\nLine 2\nLine 3");
            
                // Indent this entire Paragraph from the left.
                p.IndentationBefore = 2.0f;
                
                // Save all changes made to this document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.IndentationAfter">
            <summary>
            Set the after indentation in cm for this Paragraph.
            </summary>
            <example>
            // Indent an entire Paragraph from the right.
            <code>
            // Create a new document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Create a new Paragraph.
                Paragraph p = document.InsertParagraph("Line 1\nLine 2\nLine 3");
            
                // Make the content of this Paragraph flow right to left.
                p.Direction = Direction.RightToLeft;
            
                // Indent this entire Paragraph from the right.
                p.IndentationAfter = 2.0f;
                
                // Save all changes made to this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertTableBeforeSelf(System.Int32,System.Int32)">
             <summary>
             Insert a new Table into this document before this Paragraph.
             </summary>
             <param name="rowCount">The number of rows this Table should have.</param>
             <param name="columnCount">The number of columns this Table should have.</param>
             <returns>A new Table inserted before this Paragraph.</returns>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 //Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("Hello World", false);
            
                 // Insert a new Table before this Paragraph.
                 Table newTable = p.InsertTableBeforeSelf(2, 2);
                 newTable.Design = TableDesign.LightShadingAccent2;
                 newTable.Alignment = Alignment.center;
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertTableAfterSelf(Novacode.Table)">
             <summary>
             Insert a new Table after this Paragraph.
             </summary>
             <param name="t">The Table t to be inserted.</param>
             <returns>A new Table inserted after this Paragraph.</returns>
             <example>
             Insert a new Table after this Paragraph.
             <code>
             // Place holder for a Table.
             Table t;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first Table from this document.
                 t = documentA.Tables[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Paragraph in document b.
                 Paragraph p2 = documentB.Paragraphs[0];
            
                 // Insert the Table from document a after this Paragraph.
                 Table newTable = p2.InsertTableAfterSelf(t);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertTableAfterSelf(System.Int32,System.Int32)">
             <summary>
             Insert a new Table into this document after this Paragraph.
             </summary>
             <param name="rowCount">The number of rows this Table should have.</param>
             <param name="columnCount">The number of columns this Table should have.</param>
             <returns>A new Table inserted after this Paragraph.</returns>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 //Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("Hello World", false);
            
                 // Insert a new Table after this Paragraph.
                 Table newTable = p.InsertTableAfterSelf(2, 2);
                 newTable.Design = TableDesign.LightShadingAccent2;
                 newTable.Alignment = Alignment.center;
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphBeforeSelf(Novacode.Paragraph)">
             <summary>
             Insert a Paragraph before this Paragraph, this Paragraph may have come from the same or another document.
             </summary>
             <param name="p">The Paragraph to insert.</param>
             <returns>The Paragraph now associated with this document.</returns>
             <example>
             Take a Paragraph from document a, and insert it into document b before this Paragraph.
             <code>
             // Place holder for a Paragraph.
             Paragraph p;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first paragraph from this document.
                 p = documentA.Paragraphs[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Paragraph in document b.
                 Paragraph p2 = documentB.Paragraphs[0];
            
                 // Insert the Paragraph from document a before this Paragraph.
                 Paragraph newParagraph = p2.InsertParagraphBeforeSelf(p);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code> 
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphBeforeSelf(System.String)">
             <summary>
             Insert a new Paragraph before this Paragraph.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <returns>A new Paragraph inserted before this Paragraph.</returns>
             <example>
             Insert a new paragraph before the first Paragraph in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("I am a Paragraph", false);
            
                 p.InsertParagraphBeforeSelf("I was inserted before the next Paragraph.");
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphBeforeSelf(System.String,System.Boolean)">
             <summary>
             Insert a new Paragraph before this Paragraph.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <returns>A new Paragraph inserted before this Paragraph.</returns>
             <example>
             Insert a new paragraph before the first Paragraph in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("I am a Paragraph", false);
            
                 p.InsertParagraphBeforeSelf("I was inserted before the next Paragraph.", false);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphBeforeSelf(System.String,System.Boolean,Novacode.Formatting)">
             <summary>
             Insert a new Paragraph before this Paragraph.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <param name="formatting">The formatting to apply to this insertion.</param>
             <returns>A new Paragraph inserted before this Paragraph.</returns>
             <example>
             Insert a new paragraph before the first Paragraph in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("I am a Paragraph", false);
            
                 Formatting boldFormatting = new Formatting();
                 boldFormatting.Bold = true;
            
                 p.InsertParagraphBeforeSelf("I was inserted before the next Paragraph.", false, boldFormatting);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertPageBreakBeforeSelf">
            <summary>
            Insert a page break before a Paragraph.
            </summary>
            <example>
            Insert 2 Paragraphs into a document with a page break between them.
            <code>
            using (DocX document = DocX.Create(@"Test.docx"))
            {
               // Insert a new Paragraph.
               Paragraph p1 = document.InsertParagraph("Paragraph 1", false);
                  
               // Insert a new Paragraph.
               Paragraph p2 = document.InsertParagraph("Paragraph 2", false);
               
               // Insert a page break before Paragraph two.
               p2.InsertPageBreakBeforeSelf();
               
               // Save this document.
               document.Save();
            }// Release this document from memory.
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertPageBreakAfterSelf">
             <summary>
             Insert a page break after a Paragraph.
             </summary>
             <example>
             Insert 2 Paragraphs into a document with a page break between them.
             <code>
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                // Insert a new Paragraph.
                Paragraph p1 = document.InsertParagraph("Paragraph 1", false);
                   
                // Insert a page break after this Paragraph.
                p1.InsertPageBreakAfterSelf();
                   
                // Insert a new Paragraph.
                Paragraph p2 = document.InsertParagraph("Paragraph 2", false);
            
                // Save this document.
                document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertHyperlink(Novacode.Hyperlink,System.Int32)">
            <summary>
            This function inserts a hyperlink into a Paragraph at a specified character index.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="h">The hyperlink to insert.</param>
            <returns>The Paragraph with the Hyperlink inserted at the specified index.</returns>
            <!-- 
            This function was added by Brian Campbell aka chickendelicious on Jun 16 2010
            Thank you Brian.
            -->
        </member>
        <member name="M:Novacode.Paragraph.RemoveHyperlink(System.Int32)">
             <summary>
             Remove the Hyperlink at the provided index. The first hyperlink is at index 0.
             Using a negative index or an index greater than the index of the last hyperlink will cause an ArgumentOutOfRangeException() to be thrown.
             </summary>
             <param name="index">The index of the hyperlink to be removed.</param>
             <example>
             <code>
             // Crete a new document.
             using (DocX document = DocX.Create("Test.docx"))
             {
                 // Add a Hyperlink into this document.
                 Hyperlink h = document.AddHyperlink("link", new Uri("http://www.google.com"));
            
                 // Insert a new Paragraph into the document.
                 Paragraph p1 = document.InsertParagraph("AC");
                 
                 // Insert the hyperlink into this Paragraph.
                 p1.InsertHyperlink(1, h);
                 Assert.IsTrue(p1.Text == "AlinkC"); // Make sure the hyperlink was inserted correctly;
                 
                 // Remove the hyperlink
                 p1.RemoveHyperlink(0);
                 Assert.IsTrue(p1.Text == "AC"); // Make sure the hyperlink was removed correctly;
             }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphAfterSelf(Novacode.Paragraph)">
             <summary>
             Insert a Paragraph after this Paragraph, this Paragraph may have come from the same or another document.
             </summary>
             <param name="p">The Paragraph to insert.</param>
             <returns>The Paragraph now associated with this document.</returns>
             <example>
             Take a Paragraph from document a, and insert it into document b after this Paragraph.
             <code>
             // Place holder for a Paragraph.
             Paragraph p;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"a.docx"))
             {
                 // Get the first paragraph from this document.
                 p = documentA.Paragraphs[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"b.docx"))
             {
                 // Get the first Paragraph in document b.
                 Paragraph p2 = documentB.Paragraphs[0];
            
                 // Insert the Paragraph from document a after this Paragraph.
                 Paragraph newParagraph = p2.InsertParagraphAfterSelf(p);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code> 
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphAfterSelf(System.String,System.Boolean,Novacode.Formatting)">
             <summary>
             Insert a new Paragraph after this Paragraph.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <param name="formatting">The formatting to apply to this insertion.</param>
             <returns>A new Paragraph inserted after this Paragraph.</returns>
             <example>
             Insert a new paragraph after the first Paragraph in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("I am a Paragraph", false);
            
                 Formatting boldFormatting = new Formatting();
                 boldFormatting.Bold = true;
            
                 p.InsertParagraphAfterSelf("I was inserted after the previous Paragraph.", false, boldFormatting);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphAfterSelf(System.String,System.Boolean)">
             <summary>
             Insert a new Paragraph after this Paragraph.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <param name="trackChanges">Should this insertion be tracked as a change?</param>
             <returns>A new Paragraph inserted after this Paragraph.</returns>
             <example>
             Insert a new paragraph after the first Paragraph in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("I am a Paragraph", false);
            
                 p.InsertParagraphAfterSelf("I was inserted after the previous Paragraph.", false);
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertParagraphAfterSelf(System.String)">
             <summary>
             Insert a new Paragraph after this Paragraph.
             </summary>
             <param name="text">The initial text for this new Paragraph.</param>
             <returns>A new Paragraph inserted after this Paragraph.</returns>
             <example>
             Insert a new paragraph after the first Paragraph in this document.
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a Paragraph into this document.
                 Paragraph p = document.InsertParagraph("I am a Paragraph", false);
            
                 p.InsertParagraphAfterSelf("I was inserted after the previous Paragraph.");
            
                 // Save all changes made to this new document.
                 document.Save();
                }// Release this new document form memory.
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.Alignment">
            <summary>
            Gets or set this Paragraphs text alignment.
            </summary>
        </member>
        <member name="M:Novacode.Paragraph.Remove(System.Boolean)">
             <summary>
             Remove this Paragraph from the document.
             </summary>
             <param name="trackChanges">Should this remove be tracked as a change?</param>
             <example>
             Remove a Paragraph from a document and track it as a change.
             <code>
             // Create a document using a relative filename.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Create and Insert a new Paragraph into this document.
                 Paragraph p = document.InsertParagraph("Hello", false);
            
                 // Remove the Paragraph and track this as a change.
                 p.Remove(true);
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.Text">
            <summary>
            Gets the text value of this Paragraph.
            </summary>
        </member>
        <member name="P:Novacode.Paragraph.MagicText">
            <summary>
            Gets the formatted text value of this Paragraph.
            </summary>
        </member>
        <member name="M:Novacode.Paragraph.CreatePicture(Novacode.DocX,System.String,System.String,System.String)">
            <summary>
            Create a new Picture.
            </summary>
            <param name="document"></param>
            <param name="id">A unique id that identifies an Image embedded in this document.</param>
            <param name="name">The name of this Picture.</param>
            <param name="descr">The description of this Picture.</param>
        </member>
        <member name="M:Novacode.Paragraph.CreateEdit(Novacode.EditType,System.DateTime,System.Object)">
            <summary>
            Creates an Edit either a ins or a del with the specified content and date
            </summary>
            <param name="t">The type of this edit (ins or del)</param>
            <param name="edit_time">The time stamp to use for this edit</param>
            <param name="content">The initial content of this edit</param>
            <returns></returns>
        </member>
        <member name="M:Novacode.Paragraph.GetElementTextLength(System.Xml.Linq.XElement)">
            <!-- 
            Bug found and fixed by krugs525 on August 12 2009.
            Use TFS compare to see exact code change.
            -->
        </member>
        <member name="M:Novacode.Paragraph.InsertText(System.String,System.Boolean,Novacode.Formatting)">
             <summary>
             Inserts a specified instance of System.String into a Novacode.DocX.Paragraph at a specified index position.
             </summary>
             <example>
             <code> 
             // Create a document using a relative filename.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Create a text formatting.
                 Formatting f = new Formatting();
                 f.FontColor = Color.Red;
                 f.Size = 30;
            
                 // Iterate through the Paragraphs in this document.
                 foreach (Paragraph p in document.Paragraphs)
                 {
                     // Insert the string "Start: " at the begining of every Paragraph and flag it as a change.
                     p.InsertText("Start: ", true, f);
                 }
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <example>
             Inserting tabs using the \t switch.
             <code>  
             // Create a document using a relative filename.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                  // Create a text formatting.
                  Formatting f = new Formatting();
                  f.FontColor = Color.Red;
                  f.Size = 30;
                    
                  // Iterate through the paragraphs in this document.
                  foreach (Paragraph p in document.Paragraphs)
                  {
                      // Insert the string "\tEnd" at the end of every paragraph and flag it as a change.
                      p.InsertText("\tEnd", true, f);
                  }
                   
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.RemoveText(System.Int32,System.Boolean)"/>
             <seealso cref="M:Novacode.Paragraph.RemoveText(System.Int32,System.Int32,System.Boolean,System.Boolean)"/>
             <param name="value">The System.String to insert.</param>
             <param name="trackChanges">Flag this insert as a change.</param>
             <param name="formatting">The text formatting.</param>
        </member>
        <member name="M:Novacode.Paragraph.InsertText(System.Int32,System.String,System.Boolean,Novacode.Formatting)">
             <summary>
             Inserts a specified instance of System.String into a Novacode.DocX.Paragraph at a specified index position.
             </summary>
             <example>
             <code> 
             // Create a document using a relative filename.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Create a text formatting.
                 Formatting f = new Formatting();
                 f.FontColor = Color.Red;
                 f.Size = 30;
            
                 // Iterate through the Paragraphs in this document.
                 foreach (Paragraph p in document.Paragraphs)
                 {
                     // Insert the string "Start: " at the begining of every Paragraph and flag it as a change.
                     p.InsertText(0, "Start: ", true, f);
                 }
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <example>
             Inserting tabs using the \t switch.
             <code>  
             // Create a document using a relative filename.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Create a text formatting.
                 Formatting f = new Formatting();
                 f.FontColor = Color.Red;
                 f.Size = 30;
            
                 // Iterate through the paragraphs in this document.
                 foreach (Paragraph p in document.Paragraphs)
                 {
                     // Insert the string "\tStart:\t" at the begining of every paragraph and flag it as a change.
                     p.InsertText(0, "\tStart:\t", true, f);
                 }
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.RemoveText(System.Int32,System.Boolean)"/>
             <seealso cref="M:Novacode.Paragraph.RemoveText(System.Int32,System.Int32,System.Boolean,System.Boolean)"/>
             <param name="index">The index position of the insertion.</param>
             <param name="value">The System.String to insert.</param>
             <param name="trackChanges">Flag this insert as a change.</param>
             <param name="formatting">The text formatting.</param>
        </member>
        <member name="M:Novacode.Paragraph.CurentCulture">
            <summary>
            For use with Append() and AppendLine()
            </summary>
            <returns>This Paragraph in curent culture</returns>
            <example>
            Add a new Paragraph with russian text to this document and then set language of text to local culture.
            <code>
            // Load a document.
            using (DocX document = DocX.Create(@"Test.docx"))
            {
                // Insert a new Paragraph with russian text and set curent local culture to it.
                Paragraph p = document.InsertParagraph("Привет мир!").CurentCulture();
                  
                // Save this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.Culture(System.Globalization.CultureInfo)">
            <summary>
            For use with Append() and AppendLine()
            </summary>
            <param name="culture">The CultureInfo for text</param>
            <returns>This Paragraph in curent culture</returns>
            <example>
            Add a new Paragraph with russian text to this document and then set language of text to local culture.
            <code>
            // Load a document.
            using (DocX document = DocX.Create(@"Test.docx"))
            {
                // Insert a new Paragraph with russian text and set specific culture to it.
                Paragraph p = document.InsertParagraph("Привет мир").Culture(CultureInfo.CreateSpecificCulture("ru-RU"));
                  
                // Save this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.Append(System.String)">
            <summary>
            Append text to this Paragraph.
            </summary>
            <param name="text">The text to append.</param>
            <returns>This Paragraph with the new text appened.</returns>
            <example>
            Add a new Paragraph to this document and then append some text to it.
            <code>
            // Load a document.
            using (DocX document = DocX.Create(@"Test.docx"))
            {
                // Insert a new Paragraph and Append some text to it.
                Paragraph p = document.InsertParagraph().Append("Hello World!!!");
                  
                // Save this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.AppendHyperlink(Novacode.Hyperlink)">
             <summary>
             Append a hyperlink to a Paragraph.
             </summary>
             <param name="h">The hyperlink to append.</param>
             <returns>The Paragraph with the hyperlink appended.</returns>
             <example>
             Creates a Paragraph with some text and a hyperlink.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                // Add a hyperlink to this document.
                Hyperlink h = document.AddHyperlink("Google", new Uri("http://www.google.com"));
                
                // Add a new Paragraph to this document.
                Paragraph p = document.InsertParagraph();
                p.Append("My favourite search engine is ");
                p.AppendHyperlink(h);
                p.Append(", I think it's great.");
            
                // Save all changes made to this document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.AppendPicture(Novacode.Picture)">
             <summary>
             Add an image to a document, create a custom view of that image (picture) and then insert it into a Paragraph using append.
             </summary>
             <param name="p">The Picture to append.</param>
             <returns>The Paragraph with the Picture now appended.</returns>
             <example>
             Add an image to a document, create a custom view of that image (picture) and then insert it into a Paragraph using append.
             <code>
             using (DocX document = DocX.Create("Test.docx"))
             {
                // Add an image to the document. 
                Image     i = document.AddImage(@"Image.jpg");
                
                // Create a picture i.e. (A custom view of an image)
                Picture   p = i.CreatePicture();
                p.FlipHorizontal = true;
                p.Rotation = 10;
            
                // Create a new Paragraph.
                Paragraph par = document.InsertParagraph();
                
                // Append content to the Paragraph.
                par.Append("Here is a cool picture")
                   .AppendPicture(p)
                   .Append(" don't you think so?");
            
                // Save all changes made to this document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.AppendEquation(System.String)">
            <summary>
            Add an equation to a document.
            </summary>
            <param name="equation">The Equation to append.</param>
            <returns>The Paragraph with the Equation now appended.</returns>
            <example>
            Add an equation to a document.
            <code>
            using (DocX document = DocX.Create("Test.docx"))
            {
               // Add an equation to the document. 
               document.AddEquation("x=y+z");
               
               // Save all changes made to this document.
               document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertPicture(Novacode.Picture,System.Int32)">
             <summary>
             Insert a Picture into a Paragraph at the given text index.
             If not index is provided defaults to 0.
             </summary>
             <param name="p">The Picture to insert.</param>
             <param name="index">The text index to insert at.</param>
             <returns>The modified Paragraph.</returns>
             <example>
             <code>
            Load test document.
            using (DocX document = DocX.Create("Test.docx"))
            {
                // Add Headers and Footers into this document.
                document.AddHeaders();
                document.AddFooters();
                document.DifferentFirstPage = true;
                document.DifferentOddAndEvenPages = true;
            
                // Add an Image to this document.
                Novacode.Image img = document.AddImage(directory_documents + "purple.png");
            
                // Create a Picture from this Image.
                Picture pic = img.CreatePicture();
            
                // Main document.
                Paragraph p0 = document.InsertParagraph("Hello");
                p0.InsertPicture(pic, 3);
            
                // Header first.
                Paragraph p1 = document.Headers.first.InsertParagraph("----");
                p1.InsertPicture(pic, 2);
            
                // Header odd.
                Paragraph p2 = document.Headers.odd.InsertParagraph("----");
                p2.InsertPicture(pic, 2);
            
                // Header even.
                Paragraph p3 = document.Headers.even.InsertParagraph("----");
                p3.InsertPicture(pic, 2);
            
                // Footer first.
                Paragraph p4 = document.Footers.first.InsertParagraph("----");
                p4.InsertPicture(pic, 2);
            
                // Footer odd.
                Paragraph p5 = document.Footers.odd.InsertParagraph("----");
                p5.InsertPicture(pic, 2);
            
                // Footer even.
                Paragraph p6 = document.Footers.even.InsertParagraph("----");
                p6.InsertPicture(pic, 2);
            
                // Save this document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.AppendLine(System.String)">
            <summary>
            Append text on a new line to this Paragraph.
            </summary>
            <param name="text">The text to append.</param>
            <returns>This Paragraph with the new text appened.</returns>
            <example>
            Add a new Paragraph to this document and then append a new line with some text to it.
            <code>
            // Load a document.
            using (DocX document = DocX.Create(@"Test.docx"))
            {
                // Insert a new Paragraph and Append a new line with some text to it.
                Paragraph p = document.InsertParagraph().AppendLine("Hello World!!!");
                  
                // Save this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.AppendLine">
            <summary>
            Append a new line to this Paragraph.
            </summary>
            <returns>This Paragraph with a new line appeneded.</returns>
            <example>
            Add a new Paragraph to this document and then append a new line to it.
            <code>
            // Load a document.
            using (DocX document = DocX.Create(@"Test.docx"))
            {
                // Insert a new Paragraph and Append a new line with some text to it.
                Paragraph p = document.InsertParagraph().AppendLine();
                  
                // Save this document.
                document.Save();
            }
            </code>
            </example>
        </member>
        <member name="M:Novacode.Paragraph.Bold">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <returns>This Paragraph with the last appended text bold.</returns>
             <example>
             Append text to this Paragraph and then make it bold.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Bold").Bold()
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Italic">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <returns>This Paragraph with the last appended text italic.</returns>
             <example>
             Append text to this Paragraph and then make it italic.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Italic").Italic()
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Color(System.Drawing.Color)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="c">A color to use on the appended text.</param>
             <returns>This Paragraph with the last appended text colored.</returns>
             <example>
             Append text to this Paragraph and then color it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Blue").Color(Color.Blue)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.UnderlineStyle(Novacode.UnderlineStyle)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="underlineStyle">The underline style to use for the appended text.</param>
             <returns>This Paragraph with the last appended text underlined.</returns>
             <example>
             Append text to this Paragraph and then underline it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Underlined").UnderlineStyle(UnderlineStyle.doubleLine)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="P:Novacode.Paragraph.FollowingTable">
            <summary>
             Returns table following the paragraph. Null if the following element isn't table.
            </summary>
        </member>
        <member name="M:Novacode.Paragraph.FontSize(System.Double)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="fontSize">The font size to use for the appended text.</param>
             <returns>This Paragraph with the last appended text resized.</returns>
             <example>
             Append text to this Paragraph and then resize it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Big").FontSize(20)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Font(System.String)">
            <summary>
            For use with Append() and AppendLine()
            </summary>
            <param name="fontName">The font to use for the appended text.</param>
            <returns>This Paragraph with the last appended text's font changed.</returns>
        </member>
        <member name="M:Novacode.Paragraph.Font(Novacode.Font)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="fontFamily">The font to use for the appended text.</param>
             <returns>This Paragraph with the last appended text's font changed.</returns>
             <example>
             Append text to this Paragraph and then change its font.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Times new roman").Font(new FontFamily("Times new roman"))
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.CapsStyle(Novacode.CapsStyle)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="capsStyle">The caps style to apply to the last appended text.</param>
             <returns>This Paragraph with the last appended text's caps style changed.</returns>
             <example>
             Append text to this Paragraph and then set it to full caps.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("Capitalized").CapsStyle(CapsStyle.caps)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Script(Novacode.Script)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="script">The script style to apply to the last appended text.</param>
             <returns>This Paragraph with the last appended text's script style changed.</returns>
             <example>
             Append text to this Paragraph and then set it to superscript.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("superscript").Script(Script.superscript)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Highlight(Novacode.Highlight)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
            <param name="highlight">The highlight to apply to the last appended text.</param>
             <returns>This Paragraph with the last appended text highlighted.</returns>
             <example>
             Append text to this Paragraph and then highlight it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("highlighted").Highlight(Highlight.green)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Misc(Novacode.Misc)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="misc">The miscellaneous property to set.</param>
             <returns>This Paragraph with the last appended text changed by a miscellaneous property.</returns>
             <example>
             Append text to this Paragraph and then apply a miscellaneous property.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("outlined").Misc(Misc.outline)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.StrikeThrough(Novacode.StrikeThrough)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="strikeThrough">The strike through style to used on the last appended text.</param>
             <returns>This Paragraph with the last appended text striked.</returns>
             <example>
             Append text to this Paragraph and then strike it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("striked").StrikeThrough(StrikeThrough.doubleStrike)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.UnderlineColor(System.Drawing.Color)">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <param name="underlineColor">The underline color to use, if no underline is set, a single line will be used.</param>
             <returns>This Paragraph with the last appended text underlined in a color.</returns>
             <example>
             Append text to this Paragraph and then underline it using a color.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("color underlined").UnderlineStyle(UnderlineStyle.dotted).UnderlineColor(Color.Orange)
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.Hide">
             <summary>
             For use with Append() and AppendLine()
             </summary>
             <returns>This Paragraph with the last appended text hidden.</returns>
             <example>
             Append text to this Paragraph and then hide it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Insert a new Paragraph.
                 Paragraph p = document.InsertParagraph();
            
                 p.Append("I am ")
                 .Append("hidden").Hide()
                 .Append(" I am not");
                    
                 // Save this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.SetLineSpacing(Novacode.LineSpacingType,System.Single)">
            <summary>
            Set the linespacing for this paragraph manually.
            </summary>
            <param name="spacingType">The type of spacing to be set, can be either Before, After or Line (Standard line spacing).</param>
            <param name="spacingFloat">A float value of the amount of spacing. Equals the value that van be set in Word using the "Line and Paragraph spacing" button.</param>
        </member>
        <member name="M:Novacode.Paragraph.SetLineSpacing(Novacode.LineSpacingTypeAuto)">
            <summary>
            Set the linespacing for this paragraph using the Auto value.
            </summary>
            <param name="spacingType">The type of spacing to be set automatically. Using Auto will set both Before and After. None will remove any linespacing.</param>
        </member>
        <member name="M:Novacode.Paragraph.AppendDocProperty(Novacode.CustomProperty,System.Boolean,Novacode.Formatting)">
             <summary>
             Append a field of type document property, this field will display the custom property cp, at the end of this paragraph.
             </summary>
             <param name="cp">The custom property to display.</param>
             <param name="trackChanges"></param>
             <param name="f">The formatting to use for this text.</param>
             <example>
             Create, add and display a custom property in a document.
             <code>
             // Load a document.
            using (DocX document = DocX.Create("CustomProperty_Add.docx"))
            {
                // Add a few Custom Properties to this document.
                document.AddCustomProperty(new CustomProperty("fname", "cathal"));
                document.AddCustomProperty(new CustomProperty("age", 24));
                document.AddCustomProperty(new CustomProperty("male", true));
                document.AddCustomProperty(new CustomProperty("newyear2012", new DateTime(2012, 1, 1)));
                document.AddCustomProperty(new CustomProperty("fav_num", 3.141592));
            
                // Insert a new Paragraph and append a load of DocProperties.
                Paragraph p = document.InsertParagraph("fname: ")
                    .AppendDocProperty(document.CustomProperties["fname"])
                    .Append(", age: ")
                    .AppendDocProperty(document.CustomProperties["age"])
                    .Append(", male: ")
                    .AppendDocProperty(document.CustomProperties["male"])
                    .Append(", newyear2012: ")
                    .AppendDocProperty(document.CustomProperties["newyear2012"])
                    .Append(", fav_num: ")
                    .AppendDocProperty(document.CustomProperties["fav_num"]);
                
                // Save the changes to the document.
                document.Save();
            }
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.InsertDocProperty(Novacode.CustomProperty,System.Boolean,Novacode.Formatting)">
             <summary>
             Insert a field of type document property, this field will display the custom property cp, at the end of this paragraph.
             </summary>
             <param name="cp">The custom property to display.</param>
             <param name="trackChanges"></param>
             <param name="f">The formatting to use for this text.</param>
             <example>
             Create, add and display a custom property in a document.
             <code>
             // Load a document
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Create a custom property.
                 CustomProperty name = new CustomProperty("name", "Cathal Coffey");
                    
                 // Add this custom property to this document.
                 document.AddCustomProperty(name);
            
                 // Create a text formatting.
                 Formatting f = new Formatting();
                 f.Bold = true;
                 f.Size = 14;
                 f.StrikeThrough = StrickThrough.strike;
            
                 // Insert a new paragraph.
                 Paragraph p = document.InsertParagraph("Author: ", false, f);
            
                 // Insert a field of type document property to display the custom property name and track this change.
                 p.InsertDocProperty(name, true, f);
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.RemoveText(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Removes characters from a Novacode.DocX.Paragraph.
            </summary>
            <example>
            <code>
            // Create a document using a relative filename.
            using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
            {
                // Iterate through the paragraphs
                foreach (Paragraph p in document.Paragraphs)
                {
                    // Remove the first two characters from every paragraph
                    p.RemoveText(0, 2, false);
                }
                   
                // Save all changes made to this document.
                document.Save();
            }// Release this document from memory.
            </code>
            </example>
            <seealso cref="M:Novacode.Paragraph.InsertText(System.Int32,System.String,System.Boolean,Novacode.Formatting)"/>
            <seealso cref="M:Novacode.Paragraph.InsertText(System.String,System.Boolean,Novacode.Formatting)"/>
            <param name="index">The position to begin deleting characters.</param>
            <param name="count">The number of characters to delete</param>
            <param name="trackChanges">Track changes</param>
            <param name="removeEmptyParagraph">Remove empty paragraph</param>
        </member>
        <member name="M:Novacode.Paragraph.RemoveText(System.Int32,System.Boolean)">
            <summary>
            Removes characters from a Novacode.DocX.Paragraph.
            </summary>
            <example>
            <code>
            // Create a document using a relative filename.
            using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
            {
                // Iterate through the paragraphs
                foreach (Paragraph p in document.Paragraphs)
                {
                    // Remove all but the first 2 characters from this Paragraph.
                    p.RemoveText(2, false);
                }
                   
                // Save all changes made to this document.
                document.Save();
            }// Release this document from memory.
            </code>
            </example>
            <seealso cref="M:Novacode.Paragraph.InsertText(System.Int32,System.String,System.Boolean,Novacode.Formatting)"/>
            <seealso cref="M:Novacode.Paragraph.InsertText(System.String,System.Boolean,Novacode.Formatting)"/>
            <param name="index">The position to begin deleting characters.</param>
            <param name="trackChanges">Track changes</param>
        </member>
        <member name="M:Novacode.Paragraph.ReplaceText(System.String,System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions,Novacode.Formatting,Novacode.Formatting,Novacode.MatchFormattingOptions,System.Boolean,System.Boolean,System.Boolean)">
             <summary>
             Replaces all occurrences of a specified System.String in this instance, with another specified System.String.
             </summary>
             <example>
             <code>
             // Load a document using a relative filename.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // The formatting to match.
                 Formatting matchFormatting = new Formatting();
                 matchFormatting.Size = 10;
                 matchFormatting.Italic = true;
                 matchFormatting.FontFamily = new FontFamily("Times New Roman");
            
                 // The formatting to apply to the inserted text.
                 Formatting newFormatting = new Formatting();
                 newFormatting.Size = 22;
                 newFormatting.UnderlineStyle = UnderlineStyle.dotted;
                 newFormatting.Bold = true;
            
                 // Iterate through the paragraphs in this document.
                 foreach (Paragraph p in document.Paragraphs)
                 {
                     /* 
                      * Replace all instances of the string "wrong" with the string "right" and ignore case.
                      * Each inserted instance of "wrong" should use the Formatting newFormatting.
                      * Only replace an instance of "wrong" if it is Size 10, Italic and Times New Roman.
                      * SubsetMatch means that the formatting must contain all elements of the match formatting,
                      * but it can also contain additional formatting for example Color, UnderlineStyle, etc.
                      * ExactMatch means it must not contain additional formatting.
                      */
                     p.ReplaceText("wrong", "right", false, RegexOptions.IgnoreCase, newFormatting, matchFormatting, MatchFormattingOptions.SubsetMatch);
                 }
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.RemoveText(System.Int32,System.Int32,System.Boolean,System.Boolean)"/>
             <seealso cref="M:Novacode.Paragraph.RemoveText(System.Int32,System.Boolean)"/>
             <seealso cref="M:Novacode.Paragraph.InsertText(System.Int32,System.String,System.Boolean,Novacode.Formatting)"/>
             <seealso cref="M:Novacode.Paragraph.InsertText(System.String,System.Boolean,Novacode.Formatting)"/>
             <param name="newValue">A System.String to replace all occurrences of oldValue.</param>
             <param name="oldValue">A System.String to be replaced.</param>
             <param name="options">A bitwise OR combination of RegexOption enumeration options.</param>
             <param name="trackChanges">Track changes</param>
             <param name="newFormatting">The formatting to apply to the text being inserted.</param>
             <param name="matchFormatting">The formatting that the text must match in order to be replaced.</param>
             <param name="fo">How should formatting be matched?</param>
             <param name="escapeRegEx">True if the oldValue needs to be escaped, otherwise false. If it represents a valid RegEx pattern this should be false.</param>
             <param name="useRegExSubstitutions">True if RegEx-like replace should be performed, i.e. if newValue contains RegEx substitutions. Does not perform named-group substitutions (only numbered groups).</param>
             <param name="removeEmptyParagraph">Remove empty paragraph</param>
        </member>
        <member name="M:Novacode.Paragraph.ReplaceText(System.String,System.Func{System.String,System.String},System.Boolean,System.Text.RegularExpressions.RegexOptions,Novacode.Formatting,Novacode.Formatting,Novacode.MatchFormattingOptions,System.Boolean)">
            <summary>
            Find pattern regex must return a group match.
            </summary>
            <param name="findPattern">Regex pattern that must include one group match. ie (.*)</param>
            <param name="regexMatchHandler">A func that accepts the matching find grouping text and returns a replacement value</param>
            <param name="trackChanges"></param>
            <param name="options"></param>
            <param name="newFormatting"></param>
            <param name="matchFormatting"></param>
            <param name="fo"></param>
            <param name="removeEmptyParagraph">Remove empty paragraph</param>
        </member>
        <member name="M:Novacode.Paragraph.FindAll(System.String)">
             <summary>
             Find all instances of a string in this paragraph and return their indexes in a List.
             </summary>
             <param name="str">The string to find</param>
             <returns>A list of indexes.</returns>
             <example>
             Find all instances of Hello in this document and insert 'don't' in frount of them.
             <code>
             // Load a document
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Loop through the paragraphs in this document.
                 foreach(Paragraph p in document.Paragraphs)
                 {
                     // Find all instances of 'go' in this paragraph.
                     <![CDATA[ List<int> ]]> gos = document.FindAll("go");
            
                     /* 
                      * Insert 'don't' in frount of every instance of 'go' in this document to produce 'don't go'.
                      * An important trick here is to do the inserting in reverse document order. If you inserted 
                      * in document order, every insert would shift the index of the remaining matches.
                      */
                     gos.Reverse();
                     foreach (int index in gos)
                     {
                         p.InsertText(index, "don't ", false);
                     }
                 }
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.FindAll(System.String,System.Text.RegularExpressions.RegexOptions)">
             <summary>
             Find all instances of a string in this paragraph and return their indexes in a List.
             </summary>
             <param name="str">The string to find</param>
             <param name="options">The options to use when finding a string match.</param>
             <returns>A list of indexes.</returns>
             <example>
             Find all instances of Hello in this document and insert 'don't' in frount of them.
             <code>
             // Load a document
             using (DocX document = DocX.Load(@"Test.docx"))
             {
                 // Loop through the paragraphs in this document.
                 foreach(Paragraph p in document.Paragraphs)
                 {
                     // Find all instances of 'go' in this paragraph (Ignore case).
                     <![CDATA[ List<int> ]]> gos = document.FindAll("go", RegexOptions.IgnoreCase);
            
                     /* 
                      * Insert 'don't' in frount of every instance of 'go' in this document to produce 'don't go'.
                      * An important trick here is to do the inserting in reverse document order. If you inserted 
                      * in document order, every insert would shift the index of the remaining matches.
                      */
                     gos.Reverse();
                     foreach (int index in gos)
                     {
                         p.InsertText(index, "don't ", false);
                     }
                 }
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.Paragraph.FindAllByPattern(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             Find all unique instances of the given Regex Pattern
            </summary>
            <param name="str"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Novacode.Paragraph.InsertPageNumber(Novacode.PageNumberFormat,System.Int32)">
             <summary>
             Insert a PageNumber place holder into a Paragraph.
             This place holder should only be inserted into a Header or Footer Paragraph.
             Word will not automatically update this field if it is inserted into a document level Paragraph.
             </summary>
             <param name="pnf">The PageNumberFormat can be normal: (1, 2, ...) or Roman: (I, II, ...)</param>
             <param name="index">The text index to insert this PageNumber place holder at.</param>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add Headers to the document.
                 document.AddHeaders();
            
                 // Get the default Header.
                 Header header = document.Headers.odd;
            
                 // Insert a Paragraph into the Header.
                 Paragraph p0 = header.InsertParagraph("Page ( of )");
            
                 // Insert place holders for PageNumber and PageCount into the Header.
                 // Word will replace these with the correct value for each Page.
                 p0.InsertPageNumber(PageNumberFormat.normal, 6);
                 p0.InsertPageCount(PageNumberFormat.normal, 11);
            
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.AppendPageCount(Novacode.PageNumberFormat)"/>
             <seealso cref="M:Novacode.Paragraph.AppendPageNumber(Novacode.PageNumberFormat)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPageCount(Novacode.PageNumberFormat,System.Int32)"/>
        </member>
        <member name="M:Novacode.Paragraph.AppendPageNumber(Novacode.PageNumberFormat)">
             <summary>
             Append a PageNumber place holder onto the end of a Paragraph.
             </summary>
             <param name="pnf">The PageNumberFormat can be normal: (1, 2, ...) or Roman: (I, II, ...)</param>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add Headers to the document.
                 document.AddHeaders();
            
                 // Get the default Header.
                 Header header = document.Headers.odd;
            
                 // Insert a Paragraph into the Header.
                 Paragraph p0 = header.InsertParagraph();
            
                 // Appemd place holders for PageNumber and PageCount into the Header.
                 // Word will replace these with the correct value for each Page.
                 p0.Append("Page (");
                 p0.AppendPageNumber(PageNumberFormat.normal);
                 p0.Append(" of ");
                 p0.AppendPageCount(PageNumberFormat.normal);
                 p0.Append(")");
             
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.AppendPageCount(Novacode.PageNumberFormat)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPageNumber(Novacode.PageNumberFormat,System.Int32)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPageCount(Novacode.PageNumberFormat,System.Int32)"/>
        </member>
        <member name="M:Novacode.Paragraph.InsertPageCount(Novacode.PageNumberFormat,System.Int32)">
             <summary>
             Insert a PageCount place holder into a Paragraph.
             This place holder should only be inserted into a Header or Footer Paragraph.
             Word will not automatically update this field if it is inserted into a document level Paragraph.
             </summary>
             <param name="pnf">The PageNumberFormat can be normal: (1, 2, ...) or Roman: (I, II, ...)</param>
             <param name="index">The text index to insert this PageCount place holder at.</param>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add Headers to the document.
                 document.AddHeaders();
            
                 // Get the default Header.
                 Header header = document.Headers.odd;
            
                 // Insert a Paragraph into the Header.
                 Paragraph p0 = header.InsertParagraph("Page ( of )");
            
                 // Insert place holders for PageNumber and PageCount into the Header.
                 // Word will replace these with the correct value for each Page.
                 p0.InsertPageNumber(PageNumberFormat.normal, 6);
                 p0.InsertPageCount(PageNumberFormat.normal, 11);
            
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.AppendPageCount(Novacode.PageNumberFormat)"/>
             <seealso cref="M:Novacode.Paragraph.AppendPageNumber(Novacode.PageNumberFormat)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPageNumber(Novacode.PageNumberFormat,System.Int32)"/>
        </member>
        <member name="M:Novacode.Paragraph.AppendPageCount(Novacode.PageNumberFormat)">
             <summary>
             Append a PageCount place holder onto the end of a Paragraph.
             </summary>
             <param name="pnf">The PageNumberFormat can be normal: (1, 2, ...) or Roman: (I, II, ...)</param>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add Headers to the document.
                 document.AddHeaders();
            
                 // Get the default Header.
                 Header header = document.Headers.odd;
            
                 // Insert a Paragraph into the Header.
                 Paragraph p0 = header.InsertParagraph();
            
                 // Appemd place holders for PageNumber and PageCount into the Header.
                 // Word will replace these with the correct value for each Page.
                 p0.Append("Page (");
                 p0.AppendPageNumber(PageNumberFormat.normal);
                 p0.Append(" of ");
                 p0.AppendPageCount(PageNumberFormat.normal);
                 p0.Append(")");
             
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.Paragraph.AppendPageNumber(Novacode.PageNumberFormat)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPageNumber(Novacode.PageNumberFormat,System.Int32)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPageCount(Novacode.PageNumberFormat,System.Int32)"/>
        </member>
        <member name="P:Novacode.Run.StartIndex">
            <summary>
            Gets the start index of this Text (text length before this text)
            </summary>
        </member>
        <member name="P:Novacode.Run.EndIndex">
            <summary>
            Gets the end index of this Text (text length before this text + this texts length)
            </summary>
        </member>
        <member name="P:Novacode.Run.Value">
            <summary>
            The text value of this text element
            </summary>
        </member>
        <member name="P:Novacode.Text.StartIndex">
            <summary>
            Gets the start index of this Text (text length before this text)
            </summary>
        </member>
        <member name="P:Novacode.Text.EndIndex">
            <summary>
            Gets the end index of this Text (text length before this text + this texts length)
            </summary>
        </member>
        <member name="P:Novacode.Text.Value">
            <summary>
            The text value of this text element
            </summary>
        </member>
        <member name="M:Novacode.Text.PreserveSpace(System.Xml.Linq.XElement)">
            <summary>
            If a text element or delText element, starts or ends with a space,
            it must have the attribute space, otherwise it must not have it.
            </summary>
            <param name="e">The (t or delText) element check</param>
        </member>
        <member name="T:Novacode.DocX">
            <summary>
            Represents a document.
            </summary>
        </member>
        <member name="P:Novacode.DocX.MarginTop">
            <summary>
            Top margin value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.MarginBottom">
            <summary>
            Bottom margin value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.MarginLeft">
            <summary>
            Left margin value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.MarginRight">
            <summary>
            Right margin value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.MarginHeader">
            <summary>
            Header margin value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.MarginFooter">
            <summary>
            Footer margin value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="M:Novacode.DocX.getMirrorMargins(System.Xml.Linq.XName)">
            <summary>
            Mirror Margins boolean value. True when margins has to be mirrored.
            </summary>
        </member>
        <member name="P:Novacode.DocX.PageWidth">
            <summary>
            Page width value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.PageHeight">
            <summary>
            Page height value in points. 1pt = 1/72 of an inch. Word internally writes docx using units = 1/20th of a point.
            </summary>
        </member>
        <member name="P:Novacode.DocX.isProtected">
             <summary>
             Returns true if any editing restrictions are imposed on this document.
             </summary>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 if(document.isProtected)
                     Console.WriteLine("Protected");
                 else
                     Console.WriteLine("Not protected");
            
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddProtection(Novacode.EditRestrictions)"/>
             <seealso cref="M:Novacode.DocX.RemoveProtection"/>
             <seealso cref="M:Novacode.DocX.GetProtectionType"/>
        </member>
        <member name="M:Novacode.DocX.GetProtectionType">
             <summary>
             Returns the type of editing protection imposed on this document.
             </summary>
             <returns>The type of editing protection imposed on this document.</returns>
             <example>
             <code>
             Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Make sure the document is protected before checking the protection type.
                 if (document.isProtected)
                 {
                     EditRestrictions protection = document.GetProtectionType();
                     Console.WriteLine("Document is protected using " + protection.ToString());
                 }
            
                 else
                     Console.WriteLine("Document is not protected.");
            
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddProtection(Novacode.EditRestrictions)"/>
             <seealso cref="M:Novacode.DocX.RemoveProtection"/>
             <seealso cref="P:Novacode.DocX.isProtected"/>
        </member>
        <member name="M:Novacode.DocX.AddProtection(Novacode.EditRestrictions)">
             <summary>
             Add editing protection to this document.
             </summary>
             <param name="er">The type of protection to add to this document.</param>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Allow no editing, only the adding of comment.
                 document.AddProtection(EditRestrictions.comments);
            
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.RemoveProtection"/>
             <seealso cref="M:Novacode.DocX.GetProtectionType"/>
             <seealso cref="P:Novacode.DocX.isProtected"/>
        </member>
        <member name="M:Novacode.DocX.RemoveProtection">
             <summary>
             Remove editing protection from this document.
             </summary>
             <example>
             <code>
             // Create a new document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Remove any editing restrictions that are imposed on this document.
                 document.RemoveProtection();
            
                 // Save the document.
                 document.Save();
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddProtection(Novacode.EditRestrictions)"/>
             <seealso cref="M:Novacode.DocX.GetProtectionType"/>
             <seealso cref="P:Novacode.DocX.isProtected"/>
        </member>
        <member name="P:Novacode.DocX.Headers">
             <summary>
             Returns a collection of Headers in this Document.
             A document typically contains three Headers.
             A default one (odd), one for the first page and one for even pages.
             </summary>
             <example>
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                // Add header support to this document.
                document.AddHeaders();
            
                // Get a collection of all headers in this document.
                Headers headers = document.Headers;
            
                // The header used for the first page of this document.
                Header first = headers.first;
            
                // The header used for odd pages of this document.
                Header odd = headers.odd;
            
                // The header used for even pages of this document.
                Header even = headers.even;
             }
             </code>
             </example>
        </member>
        <member name="P:Novacode.DocX.Footers">
             <summary>
             Returns a collection of Footers in this Document.
             A document typically contains three Footers.
             A default one (odd), one for the first page and one for even pages.
             </summary>
             <example>
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                // Add footer support to this document.
                document.AddFooters();
            
                // Get a collection of all footers in this document.
                Footers footers = document.Footers;
            
                // The footer used for the first page of this document.
                Footer first = footers.first;
            
                // The footer used for odd pages of this document.
                Footer odd = footers.odd;
            
                // The footer used for even pages of this document.
                Footer even = footers.even;
             }
             </code>
             </example>
        </member>
        <member name="P:Novacode.DocX.DifferentOddAndEvenPages">
             <summary>
             Should the Document use different Headers and Footers for odd and even pages?
             </summary>
             <example>
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add header support to this document.
                 document.AddHeaders();
            
                 // Get a collection of all headers in this document.
                 Headers headers = document.Headers;
            
                 // The header used for odd pages of this document.
                 Header odd = headers.odd;
            
                 // The header used for even pages of this document.
                 Header even = headers.even;
            
                 // Force the document to use a different header for odd and even pages.
                 document.DifferentOddAndEvenPages = true;
            
                 // Content can be added to the Headers in the same manor that it would be added to the main document.
                 Paragraph p1 = odd.InsertParagraph();
                 p1.Append("This is the odd pages header.");
            
                 Paragraph p2 = even.InsertParagraph();
                 p2.Append("This is the even pages header.");
            
                 // Save all changes to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="P:Novacode.DocX.DifferentFirstPage">
             <summary>
             Should the Document use an independent Header and Footer for the first page?
             </summary>
             <example>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add header support to this document.
                 document.AddHeaders();
            
                 // The header used for the first page of this document.
                 Header first = document.Headers.first;
            
                 // Force the document to use a different header for first page.
                 document.DifferentFirstPage = true;
            
                 // Content can be added to the Headers in the same manor that it would be added to the main document.
                 Paragraph p = first.InsertParagraph();
                 p.Append("This is the first pages header.");
            
                 // Save all changes to this document.
                 document.Save();
             }// Release this document from memory.
             </example>
        </member>
        <member name="P:Novacode.DocX.Images">
             <summary>
             Returns a list of Images in this document.
             </summary>
             <example>
             Get the unique Id of every Image in this document.
             <code>
             // Load a document.
             DocX document = DocX.Load(@"C:\Example\Test.docx");
            
             // Loop through each Image in this document.
             foreach (Novacode.Image i in document.Images)
             {
                 // Get the unique Id which identifies this Image.
                 string uniqueId = i.Id;
             }
            
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddImage(System.String,System.String)"/>
             <seealso cref="M:Novacode.DocX.AddImage(System.IO.Stream,System.String)"/>
             <seealso cref="P:Novacode.Paragraph.Pictures"/>
             <seealso cref="M:Novacode.Paragraph.InsertPicture(Novacode.Picture,System.Int32)"/>
        </member>
        <member name="P:Novacode.DocX.CustomProperties">
             <summary>
             Returns a list of custom properties in this document.
             </summary>
             <example>
             Method 1: Get the name, type and value of each CustomProperty in this document.
             <code>
             // Load Example.docx
             DocX document = DocX.Load(@"C:\Example\Test.docx");
            
             /*
              * No two custom properties can have the same name,
              * so a Dictionary is the perfect data structure to store them in.
              * Each custom property can be accessed using its name.
              */
             foreach (string name in document.CustomProperties.Keys)
             {
                 // Grab a custom property using its name.
                 CustomProperty cp = document.CustomProperties[name];
            
                 // Write this custom properties details to Console.
                 Console.WriteLine(string.Format("Name: '{0}', Value: {1}", cp.Name, cp.Value));
             }
            
             Console.WriteLine("Press any key...");
            
             // Wait for the user to press a key before closing the Console.
             Console.ReadKey();
             </code>
             </example>
             <example>
             Method 2: Get the name, type and value of each CustomProperty in this document.
             <code>
             // Load Example.docx
             DocX document = DocX.Load(@"C:\Example\Test.docx");
            
             /*
              * No two custom properties can have the same name,
              * so a Dictionary is the perfect data structure to store them in.
              * The values of this Dictionary are CustomProperties.
              */
             foreach (CustomProperty cp in document.CustomProperties.Values)
             {
                 // Write this custom properties details to Console.
                 Console.WriteLine(string.Format("Name: '{0}', Value: {1}", cp.Name, cp.Value));
             }
            
             Console.WriteLine("Press any key...");
            
             // Wait for the user to press a key before closing the Console.
             Console.ReadKey();
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddCustomProperty(Novacode.CustomProperty)"/>
        </member>
        <member name="P:Novacode.DocX.CoreProperties">
            <summary>
             Returns the list of document core properties with corresponding values.
            </summary>
        </member>
        <member name="P:Novacode.DocX.Text">
             <summary>
             Get the Text of this document.
             </summary>
             <example>
             Write to Console the Text from this document.
             <code>
             // Load a document
             DocX document = DocX.Load(@"C:\Example\Test.docx");
            
             // Get the text of this document.
             string text = document.Text;
            
             // Write the text of this document to Console.
             Console.Write(text);
            
             // Wait for the user to press a key before closing the console window.
             Console.ReadKey();
             </code>
             </example>
        </member>
        <member name="P:Novacode.DocX.FootnotesText">
            <summary>
            Get the text of each footnote from this document
            </summary>
        </member>
        <member name="P:Novacode.DocX.EndnotesText">
            <summary>
            Get the text of each endnote from this document
            </summary>
        </member>
        <member name="M:Novacode.DocX.InsertDocument(Novacode.DocX,System.Boolean)">
             <summary>
             Insert the contents of another document at the end of this document.
             </summary>
             <param name="remote_document">The document to insert at the end of this document.</param>
             <param name="append">If true, document is inserted at the end, otherwise document is inserted at the beginning.</param>
             <example>
             Create a new document and insert an old document into it.
             <code>
             // Create a new document.
             using (DocX newDocument = DocX.Create(@"NewDocument.docx"))
             {
                 // Load an old document.
                 using (DocX oldDocument = DocX.Load(@"OldDocument.docx"))
                 {
                     // Insert the old document into the new document.
                     newDocument.InsertDocument(oldDocument);
            
                     // Save the new document.
                     newDocument.Save();
                 }// Release the old document from memory.
             }// Release the new document from memory.
             </code>
             <remarks>
             If the document being inserted contains Images, CustomProperties and or custom styles, these will be correctly inserted into the new document. In the case of Images, new ID's are generated for the Images being inserted to avoid ID conflicts. CustomProperties with the same name will be ignored not replaced.
             </remarks>
             </example>
        </member>
        <member name="M:Novacode.DocX.InsertTable(System.Int32,System.Int32)">
             <summary>
             Insert a new Table at the end of this document.
             </summary>
             <param name="columnCount">The number of columns to create.</param>
             <param name="rowCount">The number of rows to create.</param>
             <returns>A new Table.</returns>
             <example>
             Insert a new Table with 2 columns and 3 rows, at the end of a document.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"C:\Example\Test.docx"))
             {
                 // Create a new Table with 2 columns and 3 rows.
                 Table newTable = document.InsertTable(2, 3);
            
                 // Set the design of this Table.
                 newTable.Design = TableDesign.LightShadingAccent2;
            
                 // Set the column names.
                 newTable.Rows[0].Cells[0].Paragraph.InsertText("Ice Cream", false);
                 newTable.Rows[0].Cells[1].Paragraph.InsertText("Price", false);
            
                 // Fill row 1
                 newTable.Rows[1].Cells[0].Paragraph.InsertText("Chocolate", false);
                 newTable.Rows[1].Cells[1].Paragraph.InsertText("€3:50", false);
            
                 // Fill row 2
                 newTable.Rows[2].Cells[0].Paragraph.InsertText("Vanilla", false);
                 newTable.Rows[2].Cells[1].Paragraph.InsertText("€3:00", false);
            
                 // Save all changes made to document b.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.DocX.AddList(System.String,System.Int32,Novacode.ListItemType,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Create a new list with a list item.
            </summary>
            <param name="listText">The text of the first element in the created list.</param>
            <param name="level">The indentation level of the element in the list.</param>
            <param name="listType">The type of list to be created: Bulleted or Numbered.</param>
            <param name="startNumber">The number start number for the list. </param>
            <param name="trackChanges">Enable change tracking</param>
            <param name="continueNumbering">Set to true if you want to continue numbering from the previous numbered list</param>
            <returns>
            The created List. Call AddListItem(...) to add more elements to the list.
            Write the list to the Document with InsertList(...) once the list has all the desired
            elements, otherwise the list will not be included in the working Document.
            </returns>
        </member>
        <member name="M:Novacode.DocX.AddListItem(Novacode.List,System.String,System.Int32,Novacode.ListItemType,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Add a list item to an already existing list.
            </summary>
            <param name="list">The list to add the new list item to.</param>
            <param name="listText">The run text that should be in the new list item.</param>
            <param name="level">The indentation level of the new list element.</param>
            <param name="startNumber">The number start number for the list. </param>
            <param name="trackChanges">Enable change tracking</param>
            <param name="listType">Numbered or Bulleted list type. </param>
            /// <param name="continueNumbering">Set to true if you want to continue numbering from the previous numbered list</param>
            <returns>
            The created List. Call AddListItem(...) to add more elements to the list.
            Write the list to the Document with InsertList(...) once the list has all the desired
            elements, otherwise the list will not be included in the working Document.
            </returns>
        </member>
        <member name="M:Novacode.DocX.InsertList(Novacode.List)">
            <summary>
            Insert list into the document.
            </summary>
            <param name="list">The list to insert into the document.</param>
            <returns>The list that was inserted into the document.</returns>
        </member>
        <member name="M:Novacode.DocX.InsertList(System.Int32,Novacode.List)">
            <summary>
            Insert a list at an index location in the document.
            </summary>
            <param name="index">Index in document to insert the list.</param>
            <param name="list">The list that was inserted into the document.</param>
            <returns></returns>
        </member>
        <member name="M:Novacode.DocX.InsertTable(System.Int32,Novacode.Table)">
             <summary>
             Insert a Table into this document. The Table's source can be a completely different document.
             </summary>
             <param name="t">The Table to insert.</param>
             <param name="index">The index to insert this Table at.</param>
             <returns>The Table now associated with this document.</returns>
             <example>
             Extract a Table from document a and insert it into document b, at index 10.
             <code>
             // Place holder for a Table.
             Table t;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"C:\Example\a.docx"))
             {
                 // Get the first Table from this document.
                 t = documentA.Tables[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"C:\Example\b.docx"))
             {
                 /*
                  * Insert the Table that was extracted from document a, into document b.
                  * This creates a new Table that is now associated with document b.
                  */
                 Table newTable = documentB.InsertTable(10, t);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.DocX.InsertTable(Novacode.Table)">
             <summary>
             Insert a Table into this document. The Table's source can be a completely different document.
             </summary>
             <param name="t">The Table to insert.</param>
             <returns>The Table now associated with this document.</returns>
             <example>
             Extract a Table from document a and insert it at the end of document b.
             <code>
             // Place holder for a Table.
             Table t;
            
             // Load document a.
             using (DocX documentA = DocX.Load(@"C:\Example\a.docx"))
             {
                 // Get the first Table from this document.
                 t = documentA.Tables[0];
             }
            
             // Load document b.
             using (DocX documentB = DocX.Load(@"C:\Example\b.docx"))
             {
                 /*
                  * Insert the Table that was extracted from document a, into document b.
                  * This creates a new Table that is now associated with document b.
                  */
                 Table newTable = documentB.InsertTable(t);
            
                 // Save all changes made to document b.
                 documentB.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.DocX.InsertTable(System.Int32,System.Int32,System.Int32)">
             <summary>
             Insert a new Table at the end of this document.
             </summary>
             <param name="columnCount">The number of columns to create.</param>
             <param name="rowCount">The number of rows to create.</param>
             <param name="index">The index to insert this Table at.</param>
             <returns>A new Table.</returns>
             <example>
             Insert a new Table with 2 columns and 3 rows, at index 37 in this document.
             <code>
             // Create a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Create a new Table with 3 rows and 2 columns. Insert this Table at index 37.
                 Table newTable = document.InsertTable(37, 3, 2);
            
                 // Set the design of this Table.
                 newTable.Design = TableDesign.LightShadingAccent3;
            
                 // Set the column names.
                 newTable.Rows[0].Cells[0].Paragraph.InsertText("Ice Cream", false);
                 newTable.Rows[0].Cells[1].Paragraph.InsertText("Price", false);
            
                 // Fill row 1
                 newTable.Rows[1].Cells[0].Paragraph.InsertText("Chocolate", false);
                 newTable.Rows[1].Cells[1].Paragraph.InsertText("€3:50", false);
            
                 // Fill row 2
                 newTable.Rows[2].Cells[0].Paragraph.InsertText("Vanilla", false);
                 newTable.Rows[2].Cells[1].Paragraph.InsertText("€3:00", false);
            
                 // Save all changes made to document b.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
        </member>
        <member name="M:Novacode.DocX.Create(System.IO.Stream,Novacode.DocumentTypes)">
             <summary>
             Creates a document using a Stream.
             </summary>
             <param name="stream">The Stream to create the document from.</param>
             <param name="documentType"></param>
             <returns>Returns a DocX object which represents the document.</returns>
             <example>
             Creating a document from a FileStream.
             <code>
             // Use a FileStream fs to create a new document.
             using(FileStream fs = new FileStream(@"C:\Example\Test.docx", FileMode.Create))
             {
                 // Load the document using fs
                 using (DocX document = DocX.Create(fs))
                 {
                     // Do something with the document here.
            
                     // Save all changes made to this document.
                     document.Save();
                 }// Release this document from memory.
             }
             </code>
             </example>
             <example>
             Creating a document in a SharePoint site.
             <code>
             using(SPSite mySite = new SPSite("http://server/sites/site"))
             {
                 // Open a connection to the SharePoint site
                 using(SPWeb myWeb = mySite.OpenWeb())
                 {
                     // Create a MemoryStream ms.
                     using (MemoryStream ms = new MemoryStream())
                     {
                         // Create a document using ms.
                         using (DocX document = DocX.Create(ms))
                         {
                             // Do something with the document here.
            
                             // Save all changes made to this document.
                             document.Save();
                         }// Release this document from memory
            
                         // Add the document to the SharePoint site
                         web.Files.Add("filename", ms.ToArray(), true);
                     }
                 }
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
             <seealso cref="M:Novacode.DocX.Load(System.String)"/>
             <seealso cref="M:Novacode.DocX.Save"/>
        </member>
        <member name="M:Novacode.DocX.Create(System.String,Novacode.DocumentTypes)">
             <summary>
             Creates a document using a fully qualified or relative filename.
             </summary>
             <param name="filename">The fully qualified or relative filename.</param>
             <param name="documentType"></param>
             <returns>Returns a DocX object which represents the document.</returns>
             <example>
             <code>
             // Create a document using a relative filename.
             using (DocX document = DocX.Create(@"..\Test.docx"))
             {
                 // Do something with the document here.
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory
             </code>
             <code>
             // Create a document using a relative filename.
             using (DocX document = DocX.Create(@"..\Test.docx"))
             {
                 // Do something with the document here.
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory
             </code>
             <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
             <seealso cref="M:Novacode.DocX.Load(System.String)"/>
             <seealso cref="M:Novacode.DocX.Save"/>
             </example>
        </member>
        <member name="M:Novacode.DocX.Copy">
            <summary>
            Saves and copies the document into a new DocX object
            </summary>
            <returns>
            Returns a new DocX object with an identical document
            </returns>
            <example>
            <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
            <seealso cref="M:Novacode.DocX.Save"/>
            </example>
        </member>
        <member name="M:Novacode.DocX.Load(System.IO.Stream)">
             <summary>
             Loads a document into a DocX object using a Stream.
             </summary>
             <param name="stream">The Stream to load the document from.</param>
             <returns>
             Returns a DocX object which represents the document.
             </returns>
             <example>
             Loading a document from a FileStream.
             <code>
             // Open a FileStream fs to a document.
             using (FileStream fs = new FileStream(@"C:\Example\Test.docx", FileMode.Open))
             {
                 // Load the document using fs.
                 using (DocX document = DocX.Load(fs))
                 {
                     // Do something with the document here.
            
                     // Save all changes made to the document.
                     document.Save();
                 }// Release this document from memory.
             }
             </code>
             </example>
             <example>
             Loading a document from a SharePoint site.
             <code>
             // Get the SharePoint site that you want to access.
             using (SPSite mySite = new SPSite("http://server/sites/site"))
             {
                 // Open a connection to the SharePoint site
                 using (SPWeb myWeb = mySite.OpenWeb())
                 {
                     // Grab a document stored on this site.
                     SPFile file = web.GetFile("Source_Folder_Name/Source_File");
            
                     // DocX.Load requires a Stream, so open a Stream to this document.
                     Stream str = new MemoryStream(file.OpenBinary());
            
                     // Load the file using the Stream str.
                     using (DocX document = DocX.Load(str))
                     {
                         // Do something with the document here.
            
                         // Save all changes made to the document.
                         document.Save();
                     }// Release this document from memory.
                 }
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.Load(System.String)"/>
             <seealso cref="M:Novacode.DocX.Save"/>
        </member>
        <member name="M:Novacode.DocX.Load(System.String)">
             <summary>
             Loads a document into a DocX object using a fully qualified or relative filename.
             </summary>
             <param name="filename">The fully qualified or relative filename.</param>
             <returns>
             Returns a DocX object which represents the document.
             </returns>
             <example>
             <code>
             // Load a document using its fully qualified filename
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Do something with the document here
            
                 // Save all changes made to document.
                 document.Save();
             }// Release this document from memory.
             </code>
             <code>
             // Load a document using its relative filename.
             using(DocX document = DocX.Load(@"..\..\Test.docx"))
             {
                 // Do something with the document here.
            
                 // Save all changes made to document.
                 document.Save();
             }// Release this document from memory.
             </code>
             <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
             <seealso cref="M:Novacode.DocX.Save"/>
             </example>
        </member>
        <member name="M:Novacode.DocX.ApplyTemplate(System.String)">
            <summary>
             Applies document template to the document. Document template may include styles, headers, footers, properties, etc. as well as text content.
            </summary>
            <param name="templateFilePath">The path to the document template file.</param>
            <exception cref="T:System.IO.FileNotFoundException">The document template file not found.</exception>
        </member>
        <member name="M:Novacode.DocX.ApplyTemplate(System.String,System.Boolean)">
            <summary>
             Applies document template to the document. Document template may include styles, headers, footers, properties, etc. as well as text content.
            </summary>
            <param name="templateFilePath">The path to the document template file.</param>
            <param name="includeContent">Whether to copy the document template text content to document.</param>
            <exception cref="T:System.IO.FileNotFoundException">The document template file not found.</exception>
        </member>
        <member name="M:Novacode.DocX.ApplyTemplate(System.IO.Stream)">
            <summary>
             Applies document template to the document. Document template may include styles, headers, footers, properties, etc. as well as text content.
            </summary>
            <param name="templateStream">The stream of the document template file.</param>
        </member>
        <member name="M:Novacode.DocX.ApplyTemplate(System.IO.Stream,System.Boolean)">
            <summary>
             Applies document template to the document. Document template may include styles, headers, footers, properties, etc. as well as text content.
            </summary>
            <param name="templateStream">The stream of the document template file.</param>
            <param name="includeContent">Whether to copy the document template text content to document.</param>
        </member>
        <member name="M:Novacode.DocX.AddImage(System.String,System.String)">
             <summary>
             Add an Image into this document from a fully qualified or relative filename.
             </summary>
             <param name="filename">The fully qualified or relative filename.</param>
             <param name="contentType">MIME type of image, guessed if not given.</param>
             <returns>An Image file.</returns>
             <example>
             Add an Image into this document from a fully qualified filename.
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Add an Image from a file.
                 document.AddImage(@"C:\Example\Image.png");
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddImage(System.IO.Stream,System.String)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPicture(Novacode.Picture,System.Int32)"/>
        </member>
        <member name="M:Novacode.DocX.AddImage(System.IO.Stream,System.String)">
             <summary>
             Add an Image into this document from a Stream.
             </summary>
             <param name="stream">A Stream stream.</param>
             <param name="contentType">MIME type of image.</param>
             <returns>An Image file.</returns>
             <example>
             Add an Image into a document using a Stream.
             <code>
             // Open a FileStream fs to an Image.
             using (FileStream fs = new FileStream(@"C:\Example\Image.jpg", FileMode.Open))
             {
                 // Load a document.
                 using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
                 {
                     // Add an Image from a filestream fs.
                     document.AddImage(fs);
            
                     // Save all changes made to this document.
                     document.Save();
                 }// Release this document from memory.
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.AddImage(System.String,System.String)"/>
             <seealso cref="M:Novacode.Paragraph.InsertPicture(Novacode.Picture,System.Int32)"/>
        </member>
        <member name="M:Novacode.DocX.AddHyperlink(System.String,System.Uri)">
             <summary>
             Adds a hyperlink to a document and creates a Paragraph which uses it.
             </summary>
             <param name="text">The text as displayed by the hyperlink.</param>
             <param name="uri">The hyperlink itself.</param>
             <returns>Returns a hyperlink that can be inserted into a Paragraph.</returns>
             <example>
             Adds a hyperlink to a document and creates a Paragraph which uses it.
             <code>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                // Add a hyperlink to this document.
                Hyperlink h = document.AddHyperlink("Google", new Uri("http://www.google.com"));
            
                // Add a new Paragraph to this document.
                Paragraph p = document.InsertParagraph();
                p.Append("My favourite search engine is ");
                p.AppendHyperlink(h);
                p.Append(", I think it's great.");
            
                // Save all changes made to this document.
                document.Save();
             }
             </code>
             </example>
        </member>
        <member name="M:Novacode.DocX.AddHeaders">
             <summary>
             Adds three new Headers to this document. One for the first page, one for odd pages and one for even pages.
             </summary>
             <example>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add header support to this document.
                 document.AddHeaders();
            
                 // Get a collection of all headers in this document.
                 Headers headers = document.Headers;
            
                 // The header used for the first page of this document.
                 Header first = headers.first;
            
                 // The header used for odd pages of this document.
                 Header odd = headers.odd;
            
                 // The header used for even pages of this document.
                 Header even = headers.even;
            
                 // Force the document to use a different header for first, odd and even pages.
                 document.DifferentFirstPage = true;
                 document.DifferentOddAndEvenPages = true;
            
                 // Content can be added to the Headers in the same manor that it would be added to the main document.
                 Paragraph p = first.InsertParagraph();
                 p.Append("This is the first pages header.");
            
                 // Save all changes to this document.
                 document.Save();
             }// Release this document from memory.
             </example>
        </member>
        <member name="M:Novacode.DocX.AddFooters">
             <summary>
             Adds three new Footers to this document. One for the first page, one for odd pages and one for even pages.
             </summary>
             <example>
             // Create a document.
             using (DocX document = DocX.Create(@"Test.docx"))
             {
                 // Add footer support to this document.
                 document.AddFooters();
            
                 // Get a collection of all footers in this document.
                 Footers footers = document.Footers;
            
                 // The footer used for the first page of this document.
                 Footer first = footers.first;
            
                 // The footer used for odd pages of this document.
                 Footer odd = footers.odd;
            
                 // The footer used for even pages of this document.
                 Footer even = footers.even;
            
                 // Force the document to use a different footer for first, odd and even pages.
                 document.DifferentFirstPage = true;
                 document.DifferentOddAndEvenPages = true;
            
                 // Content can be added to the Footers in the same manor that it would be added to the main document.
                 Paragraph p = first.InsertParagraph();
                 p.Append("This is the first pages footer.");
            
                 // Save all changes to this document.
                 document.Save();
             }// Release this document from memory.
             </example>
        </member>
        <member name="M:Novacode.DocX.AddHeadersOrFooters(System.Boolean)">
            <summary>
            Adds a Header to a document.
            If the document already contains a Header it will be replaced.
            </summary>
            <returns>The Header that was added to the document.</returns>
        </member>
        <member name="M:Novacode.DocX.Save">
             <summary>
             Save this document back to the location it was loaded from.
             </summary>
             <example>
             <code>
             // Load a document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // Add an Image from a file.
                 document.AddImage(@"C:\Example\Image.jpg");
            
                 // Save all changes made to this document.
                 document.Save();
             }// Release this document from memory.
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.SaveAs(System.String)"/>
             <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
             <seealso cref="M:Novacode.DocX.Load(System.String)"/>
             <!--
             Bug found and fixed by krugs525 on August 12 2009.
             Use TFS compare to see exact code change.
             -->
        </member>
        <member name="M:Novacode.DocX.SaveAs(System.String)">
             <summary>
             Save this document to a file.
             </summary>
             <param name="filename">The filename to save this document as.</param>
             <example>
             Load a document from one file and save it to another.
             <code>
             // Load a document using its fully qualified filename.
             DocX document = DocX.Load(@"C:\Example\Test1.docx");
            
             // Insert a new Paragraph
             document.InsertParagraph("Hello world!", false);
            
             // Save the document to a new location.
             document.SaveAs(@"C:\Example\Test2.docx");
             </code>
             </example>
             <example>
             Load a document from a Stream and save it to a file.
             <code>
             DocX document;
             using (FileStream fs1 = new FileStream(@"C:\Example\Test1.docx", FileMode.Open))
             {
                 // Load a document using a stream.
                 document = DocX.Load(fs1);
            
                 // Insert a new Paragraph
                 document.InsertParagraph("Hello world again!", false);
             }
            
             // Save the document to a new location.
             document.SaveAs(@"C:\Example\Test2.docx");
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.Save"/>
             <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
             <seealso cref="M:Novacode.DocX.Load(System.String)"/>
        </member>
        <member name="M:Novacode.DocX.SaveAs(System.IO.Stream)">
             <summary>
             Save this document to a Stream.
             </summary>
             <param name="stream">The Stream to save this document to.</param>
             <example>
             Load a document from a file and save it to a Stream.
             <code>
             // Place holder for a document.
             DocX document;
            
             using (FileStream fs1 = new FileStream(@"C:\Example\Test1.docx", FileMode.Open))
             {
                 // Load a document using a stream.
                 document = DocX.Load(fs1);
            
                 // Insert a new Paragraph
                 document.InsertParagraph("Hello world again!", false);
             }
            
             using (FileStream fs2 = new FileStream(@"C:\Example\Test2.docx", FileMode.Create))
             {
                 // Save the document to a different stream.
                 document.SaveAs(fs2);
             }
            
             // Release this document from memory.
             document.Dispose();
             </code>
             </example>
             <example>
             Load a document from one Stream and save it to another.
             <code>
             DocX document;
             using (FileStream fs1 = new FileStream(@"C:\Example\Test1.docx", FileMode.Open))
             {
                 // Load a document using a stream.
                 document = DocX.Load(fs1);
            
                 // Insert a new Paragraph
                 document.InsertParagraph("Hello world again!", false);
             }
            
             using (FileStream fs2 = new FileStream(@"C:\Example\Test2.docx", FileMode.Create))
             {
                 // Save the document to a different stream.
                 document.SaveAs(fs2);
             }
             </code>
             </example>
             <seealso cref="M:Novacode.DocX.Save"/>
             <seealso cref="M:Novacode.DocX.Load(System.IO.Stream)"/>
             <seealso cref="M:Novacode.DocX.Load(System.String)"/>
        </member>
        <member name="M:Novacode.DocX.AddCoreProperty(System.String,System.String)">
             <summary>
             Add a core property to this document. If a core property already exists with the same name it will be replaced. Core property names are case insensitive.
             </summary>
            <param name="propertyName">The property name.</param>
            <param name="propertyValue">The property value.</param>
            <example>
             Add a core properties of each type to a document.
             <code>
             // Load Example.docx
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // If this document does not contain a core property called 'forename', create one.
                 if (!document.CoreProperties.ContainsKey("forename"))
                 {
                     // Create a new core property called 'forename' and set its value.
                     document.AddCoreProperty("forename", "Cathal");
                 }
            
                 // Get this documents core property called 'forename'.
                 string forenameValue = document.CoreProperties["forename"];
            
                 // Print all of the information about this core property to Console.
                 Console.WriteLine(string.Format("Name: '{0}', Value: '{1}'\nPress any key...", "forename", forenameValue));
            
                 // Save all changes made to this document.
                 document.Save();
             } // Release this document from memory.
            
             // Wait for the user to press a key before exiting.
             Console.ReadKey();
             </code>
             </example>
             <seealso cref="P:Novacode.DocX.CoreProperties"/>
             <seealso cref="T:Novacode.CustomProperty"/>
             <seealso cref="P:Novacode.DocX.CustomProperties"/>
        </member>
        <member name="M:Novacode.DocX.AddCustomProperty(Novacode.CustomProperty)">
             <summary>
             Add a custom property to this document. If a custom property already exists with the same name it will be replace. CustomProperty names are case insensitive.
             </summary>
             <param name="cp">The CustomProperty to add to this document.</param>
             <example>
             Add a custom properties of each type to a document.
             <code>
             // Load Example.docx
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                 // A CustomProperty called forename which stores a string.
                 CustomProperty forename;
            
                 // If this document does not contain a custom property called 'forename', create one.
                 if (!document.CustomProperties.ContainsKey("forename"))
                 {
                     // Create a new custom property called 'forename' and set its value.
                     document.AddCustomProperty(new CustomProperty("forename", "Cathal"));
                 }
            
                 // Get this documents custom property called 'forename'.
                 forename = document.CustomProperties["forename"];
            
                 // Print all of the information about this CustomProperty to Console.
                 Console.WriteLine(string.Format("Name: '{0}', Value: '{1}'\nPress any key...", forename.Name, forename.Value));
            
                 // Save all changes made to this document.
                 document.Save();
             } // Release this document from memory.
            
             // Wait for the user to press a key before exiting.
             Console.ReadKey();
             </code>
             </example>
             <seealso cref="T:Novacode.CustomProperty"/>
             <seealso cref="P:Novacode.DocX.CustomProperties"/>
        </member>
        <member name="M:Novacode.DocX.UpdateCustomPropertyValue(Novacode.DocX,System.String,System.String)">
            <summary>
            Update the custom properties inside the document
            </summary>
            <param name="document">The DocX document</param>
            <param name="customPropertyName">The property used inside the document</param>
            <param name="customPropertyValue">The new value for the property</param>
            <remarks>Different version of Word create different Document XML.</remarks>
        </member>
        <member name="M:Novacode.DocX.InsertEquation(System.String)">
            <summary>
            Create an equation and insert it in the new paragraph
            </summary>
        </member>
        <member name="M:Novacode.DocX.InsertChart(Novacode.Chart)">
            <summary>
            Insert a chart in document
            </summary>
        </member>
        <member name="M:Novacode.DocX.InsertChartAfterParagraph(Novacode.Chart,Novacode.Paragraph)">
            <summary>
            Insert a chart in document after paragraph
            </summary>
        </member>
        <member name="M:Novacode.DocX.InsertDefaultTableOfContents">
            <summary>
            Inserts a default TOC into the current document.
            Title: Table of contents
            Swithces will be: TOC \h \o '1-3' \u \z
            </summary>
            <returns>The inserted TableOfContents</returns>
        </member>
        <member name="M:Novacode.DocX.InsertTableOfContents(System.String,Novacode.TableOfContentsSwitches,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Inserts a TOC into the current document.
            </summary>
            <param name="title">The title of the TOC</param>
            <param name="switches">Switches to be applied, see: http://officeopenxml.com/WPtableOfContents.php </param>
            <param name="headerStyle">Lets you set the style name of the TOC header</param>
            <param name="maxIncludeLevel">Lets you specify how many header levels should be included - default is 1-3</param>
            <param name="rightTabPos">Lets you override the right tab position - this is not common</param>
            <returns>The inserted TableOfContents</returns>
        </member>
        <member name="M:Novacode.DocX.InsertTableOfContents(Novacode.Paragraph,System.String,Novacode.TableOfContentsSwitches,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Inserts at TOC into the current document before the provided <paramref name="reference"/>
            </summary>
            <param name="reference">The paragraph to use as reference</param>
            <param name="title">The title of the TOC</param>
            <param name="switches">Switches to be applied, see: http://officeopenxml.com/WPtableOfContents.php </param>
            <param name="headerStyle">Lets you set the style name of the TOC header</param>
            <param name="maxIncludeLevel">Lets you specify how many header levels should be included - default is 1-3</param>
            <param name="rightTabPos">Lets you override the right tab position - this is not common</param>
            <returns>The inserted TableOfContents</returns>
        </member>
        <member name="M:Novacode.DocX.GetNextFreeDocPrId">
            <summary>
            Finds next free id for bookmarkStart/docPr.
            </summary>
        </member>
        <member name="M:Novacode.DocX.Dispose">
             <summary>
             Releases all resources used by this document.
             </summary>
             <example>
             If you take advantage of the using keyword, Dispose() is automatically called for you.
             <code>
             // Load document.
             using (DocX document = DocX.Load(@"C:\Example\Test.docx"))
             {
                  // The document is only in memory while in this scope.
            
             }// Dispose() is automatically called at this point.
             </code>
             </example>
             <example>
             This example is equilivant to the one above example.
             <code>
             // Load document.
             DocX document = DocX.Load(@"C:\Example\Test.docx");
            
             // Do something with the document here.
            
             // Dispose of the document.
             document.Dispose();
             </code>
             </example>
        </member>
        <member name="M:Novacode.Extensions.SetMargin(Novacode.DocX,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets margin for all the pages in a Dox document in Inches. (Written by Shashwat Tripathi)
            </summary>
            <param name="document"></param>
            <param name="top">Margin from the Top. Leave -1 for no change</param>
            <param name="bottom">Margin from the Bottom. Leave -1 for no change</param>
            <param name="right">Margin from the Right. Leave -1 for no change</param>
            <param name="left">Margin from the Left. Leave -1 for no change</param>
        </member>
    </members>
</doc>
